package javaCalculator;
/*
 * Author: James Nordquist
 * 
 * Date: 1/18/2020
 * 
 * Screen that displays calculations as well as the result
 */
import java.util.Scanner;

import javax.swing.JTextField;

public class Screen extends JTextField
{
	String current = "0"; // Digit currently being worked on
	String screen; // What to display
	String prevScreen = ""; //Used to have a reliable display
	Boolean newinput = true; // Used to tell if need to clear
	Boolean newnumber = true;
	Boolean newoperand = true;
	public Screen()
	{
		this.setSize(50,8);
		this.setEditable(false);
		this.setText(current);
	}
	
	public void AddDigit(String digit)
	{
		if(newinput == true)
		{
			this.Clear();
			newinput = false;
		}
		if(newoperand == false)
		{
			current = current.substring(0, 1);
			screen = prevScreen;
			screen += current;
			prevScreen = screen;
			newoperand = true;
		}
		if(newnumber == true)
		{
			current = "";
			newnumber = false;
		}
		screen = prevScreen; // Go to saved display
		current += digit; // add digit to current number
		screen += current; // add current number to display
		this.setText(screen); // Display
	}
	
	public void AddOperator(String op)
	{
		if(newoperand == true)
		{
			screen = prevScreen; //Go to saved display
			screen += current; // add current to screen
			prevScreen = screen; // Save display
			current = op + "0"; // reset current
			screen += current;
			this.setText(screen); // Display
			newnumber = true;
			newoperand = false;
		}
		else
		{
			screen = prevScreen;
			current = op + "0";
			screen += current;
			this.setText(screen);
		}
	}
	
	public void Negate()
	{
		if(current.charAt(0) == '-') // if negative make positive
		{
			current = current.substring(1);
		}
		else // if positive make negative
		{
			current = "-" + current;
		}
		
		screen = prevScreen;
		screen += current;
		this.setText(screen);
	}
	
	public void Clear()
	{
		current = "0";
		prevScreen = "";
		screen = "";
		this.setText(current);
	}
	
	public double GetValue()
	{
		screen = prevScreen;
		screen += current;
		this.setText(screen);
		String value = this.getText();
		double storedvalue;
		double newvalue;
		Scanner sc = new Scanner(value);
		char operator;
		
		storedvalue = Double.parseDouble(sc.findInLine("[0-9]+|.[0-9]+|[0-9]+.[0-9]+|[-0-9]+|-.[0-9]+|[-0-9]+.[0-9]+"));
		// calculation may be too complicated
		while(sc.hasNext())
		{
			operator = sc.next().charAt(0);
			newvalue = Double.parseDouble(sc.findInLine("[0-9]+|.[0-9]+|[0-9]+.[0-9]+|[-0-9]+|-.[0-9]+|[-0-9]+.[0-9]+"));
			
			switch(operator)
			{
			case '+':
				storedvalue += newvalue;
			case '-':
				storedvalue -= newvalue;
			case '*':
				storedvalue *= newvalue;
			case '/':
				if(newvalue != 0)
				{
				storedvalue /= newvalue;
				}
				else
				{
					this.setText("Dividend Cannot be 0");
					return Double.MAX_VALUE;
				}
			default:
				this.setText("Invalid");
				newinput = true;
			}
		}
		sc.close();
		return storedvalue;
	}
	
	public void SetValue(String value)
	{
		this.setText(value);
	}
}
