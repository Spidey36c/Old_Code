// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 15.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace WinformCodedUITest
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// EnterDataAndClickAdd - Use 'EnterDataAndClickAddParams' to pass parameters into this method.
        /// </summary>
        public void EnterDataAndClickAdd()
        {
            #region Variable Declarations
            WinEdit uITextInput1Edit = this.UIDemoCalculatorWindowWindow.UITextInput1Window.UITextInput1Edit;
            WinEdit uITextInput2Edit = this.UIDemoCalculatorWindowWindow.UITextInput2Window.UITextInput2Edit;
            WinButton uIAddButton = this.UIDemoCalculatorWindowWindow.UIAddWindow.UIAddButton;
            #endregion

            // Launch '%OneDrive%\Desktop\SimpleWinformsCalculator.exe'
            ApplicationUnderTest uIDemoCalculatorWindowWindow = ApplicationUnderTest.Launch(this.EnterDataAndClickAddParams.UIDemoCalculatorWindowWindowExePath, this.EnterDataAndClickAddParams.UIDemoCalculatorWindowWindowAlternateExePath);

            // Type '10' in 'textInput1' text box
            uITextInput1Edit.Text = this.EnterDataAndClickAddParams.UITextInput1EditText;

            // Type '{Tab}' in 'textInput1' text box
            Keyboard.SendKeys(uITextInput1Edit, this.EnterDataAndClickAddParams.UITextInput1EditSendKeys, ModifierKeys.None);

            // Type '10' in 'textInput2' text box
            uITextInput2Edit.Text = this.EnterDataAndClickAddParams.UITextInput2EditText;

            // Click 'Add' button
            Mouse.Click(uIAddButton, new Point(55, 31));
        }
        
        /// <summary>
        /// AssertAdd - Use 'AssertAddExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertAdd()
        {
            #region Variable Declarations
            WinEdit uITextAnswerEdit = this.UIDemoCalculatorWindowWindow.UITextAnswerWindow.UITextAnswerEdit;
            #endregion

            // Verify that the 'ControlType' property of 'textAnswer' text box equals 'Edit'
            Assert.AreEqual(this.AssertAddExpectedValues.UITextAnswerEditControlType, uITextAnswerEdit.ControlType.ToString());
        }
        
        /// <summary>
        /// CloseAddTest
        /// </summary>
        public void CloseAddTest()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UIDemoCalculatorWindowWindow.UIDemoCalculatorWindowTitleBar.UICloseButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(20, 20));
        }
        
        /// <summary>
        /// EnterDataAndClickSub - Use 'EnterDataAndClickSubParams' to pass parameters into this method.
        /// </summary>
        public void EnterDataAndClickSub()
        {
            #region Variable Declarations
            WinEdit uINameEdit = this.UICST236Window.UIItemWindow.UISimpleWinformsCalculListItem.UINameEdit;
            WinEdit uITextInput1Edit = this.UIDemoCalculatorWindowWindow.UITextInput1Window.UITextInput1Edit;
            WinEdit uITextInput2Edit = this.UIDemoCalculatorWindowWindow.UITextInput2Window.UITextInput2Edit;
            WinButton uISubtractButton = this.UIDemoCalculatorWindowWindow.UISubtractWindow.UISubtractButton;
            #endregion

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit, new Point(114, 15));

            // Type '20' in 'textInput1' text box
            uITextInput1Edit.Text = this.EnterDataAndClickSubParams.UITextInput1EditText;

            // Type '{Tab}' in 'textInput1' text box
            Keyboard.SendKeys(uITextInput1Edit, this.EnterDataAndClickSubParams.UITextInput1EditSendKeys, ModifierKeys.None);

            // Type '10' in 'textInput2' text box
            uITextInput2Edit.Text = this.EnterDataAndClickSubParams.UITextInput2EditText;

            // Click 'Subtract' button
            Mouse.Click(uISubtractButton, new Point(92, 24));
        }
        
        /// <summary>
        /// AssertSub - Use 'AssertSubExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertSub()
        {
            #region Variable Declarations
            WinEdit uITextAnswerEdit = this.UIDemoCalculatorWindowWindow.UITextAnswerWindow.UITextAnswerEdit;
            #endregion

            // Verify that the 'ControlType' property of 'textAnswer' text box equals 'Edit'
            Assert.AreEqual(this.AssertSubExpectedValues.UITextAnswerEditControlType, uITextAnswerEdit.ControlType.ToString());
        }
        
        /// <summary>
        /// CloseSubTest
        /// </summary>
        public void CloseSubTest()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UIDemoCalculatorWindowWindow.UIDemoCalculatorWindowTitleBar.UICloseButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(27, 12));
        }
        
        /// <summary>
        /// EnterDataAndClickDiv - Use 'EnterDataAndClickDivParams' to pass parameters into this method.
        /// </summary>
        public void EnterDataAndClickDiv()
        {
            #region Variable Declarations
            WinEdit uIDatemodifiedEdit = this.UICST236Window.UIItemWindow.UISimpleWinformsCalculListItem.UIDatemodifiedEdit;
            WinEdit uITextInput1Edit = this.UIDemoCalculatorWindowWindow.UITextInput1Window.UITextInput1Edit;
            WinEdit uITextInput2Edit = this.UIDemoCalculatorWindowWindow.UITextInput2Window.UITextInput2Edit;
            WinButton uIMultiplyButton = this.UIDemoCalculatorWindowWindow.UIMultiplyWindow.UIMultiplyButton;
            #endregion

            // Double-Click 'Date modified' text box
            Mouse.DoubleClick(uIDatemodifiedEdit, new Point(5, 11));

            // Type '2' in 'textInput1' text box
            uITextInput1Edit.Text = this.EnterDataAndClickDivParams.UITextInput1EditText;

            // Type '{Tab}' in 'textInput1' text box
            Keyboard.SendKeys(uITextInput1Edit, this.EnterDataAndClickDivParams.UITextInput1EditSendKeys, ModifierKeys.None);

            // Type '3' in 'textInput2' text box
            uITextInput2Edit.Text = this.EnterDataAndClickDivParams.UITextInput2EditText;

            // Click 'Multiply' button
            Mouse.Click(uIMultiplyButton, new Point(41, 15));
        }
        
        /// <summary>
        /// AssertDiv - Use 'AssertDivExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertDiv()
        {
            #region Variable Declarations
            WinEdit uITextAnswerEdit = this.UIDemoCalculatorWindowWindow.UITextAnswerWindow.UITextAnswerEdit;
            #endregion

            // Verify that the 'ControlType' property of 'textAnswer' text box equals 'Edit'
            Assert.AreEqual(this.AssertDivExpectedValues.UITextAnswerEditControlType, uITextAnswerEdit.ControlType.ToString());
        }
        
        /// <summary>
        /// CloseMultTest
        /// </summary>
        public void CloseMultTest()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UIDemoCalculatorWindowWindow.UIDemoCalculatorWindowTitleBar.UICloseButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(30, 17));
        }
        
        /// <summary>
        /// EnterDataAndClickDiv2 - Use 'EnterDataAndClickDiv2Params' to pass parameters into this method.
        /// </summary>
        public void EnterDataAndClickDiv2()
        {
            #region Variable Declarations
            WinEdit uIDatemodifiedEdit = this.UICST236Window.UIItemWindow.UISimpleWinformsCalculListItem.UIDatemodifiedEdit;
            WinEdit uITextInput1Edit = this.UIDemoCalculatorWindowWindow.UITextInput1Window.UITextInput1Edit;
            WinEdit uITextInput2Edit = this.UIDemoCalculatorWindowWindow.UITextInput2Window.UITextInput2Edit;
            WinButton uIDivideButton = this.UIDemoCalculatorWindowWindow.UIDivideWindow.UIDivideButton;
            #endregion

            // Double-Click 'Date modified' text box
            Mouse.DoubleClick(uIDatemodifiedEdit, new Point(30, 5));

            // Type '10' in 'textInput1' text box
            uITextInput1Edit.Text = this.EnterDataAndClickDiv2Params.UITextInput1EditText;

            // Type '5' in 'textInput2' text box
            uITextInput2Edit.Text = this.EnterDataAndClickDiv2Params.UITextInput2EditText;

            // Click 'Divide' button
            Mouse.Click(uIDivideButton, new Point(70, 28));
        }
        
        /// <summary>
        /// AssertDiv2 - Use 'AssertDiv2ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertDiv2()
        {
            #region Variable Declarations
            WinEdit uITextAnswerEdit = this.UIDemoCalculatorWindowWindow.UITextAnswerWindow.UITextAnswerEdit;
            #endregion

            // Verify that the 'ControlType' property of 'textAnswer' text box equals 'Edit'
            Assert.AreEqual(this.AssertDiv2ExpectedValues.UITextAnswerEditControlType, uITextAnswerEdit.ControlType.ToString());
        }
        
        /// <summary>
        /// CloseDivTest
        /// </summary>
        public void CloseDivTest()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UIDemoCalculatorWindowWindow.UIDemoCalculatorWindowTitleBar.UICloseButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(13, 15));
        }
        
        #region Properties
        public virtual EnterDataAndClickAddParams EnterDataAndClickAddParams
        {
            get
            {
                if ((this.mEnterDataAndClickAddParams == null))
                {
                    this.mEnterDataAndClickAddParams = new EnterDataAndClickAddParams();
                }
                return this.mEnterDataAndClickAddParams;
            }
        }
        
        public virtual AssertAddExpectedValues AssertAddExpectedValues
        {
            get
            {
                if ((this.mAssertAddExpectedValues == null))
                {
                    this.mAssertAddExpectedValues = new AssertAddExpectedValues();
                }
                return this.mAssertAddExpectedValues;
            }
        }
        
        public virtual EnterDataAndClickSubParams EnterDataAndClickSubParams
        {
            get
            {
                if ((this.mEnterDataAndClickSubParams == null))
                {
                    this.mEnterDataAndClickSubParams = new EnterDataAndClickSubParams();
                }
                return this.mEnterDataAndClickSubParams;
            }
        }
        
        public virtual AssertSubExpectedValues AssertSubExpectedValues
        {
            get
            {
                if ((this.mAssertSubExpectedValues == null))
                {
                    this.mAssertSubExpectedValues = new AssertSubExpectedValues();
                }
                return this.mAssertSubExpectedValues;
            }
        }
        
        public virtual EnterDataAndClickDivParams EnterDataAndClickDivParams
        {
            get
            {
                if ((this.mEnterDataAndClickDivParams == null))
                {
                    this.mEnterDataAndClickDivParams = new EnterDataAndClickDivParams();
                }
                return this.mEnterDataAndClickDivParams;
            }
        }
        
        public virtual AssertDivExpectedValues AssertDivExpectedValues
        {
            get
            {
                if ((this.mAssertDivExpectedValues == null))
                {
                    this.mAssertDivExpectedValues = new AssertDivExpectedValues();
                }
                return this.mAssertDivExpectedValues;
            }
        }
        
        public virtual EnterDataAndClickDiv2Params EnterDataAndClickDiv2Params
        {
            get
            {
                if ((this.mEnterDataAndClickDiv2Params == null))
                {
                    this.mEnterDataAndClickDiv2Params = new EnterDataAndClickDiv2Params();
                }
                return this.mEnterDataAndClickDiv2Params;
            }
        }
        
        public virtual AssertDiv2ExpectedValues AssertDiv2ExpectedValues
        {
            get
            {
                if ((this.mAssertDiv2ExpectedValues == null))
                {
                    this.mAssertDiv2ExpectedValues = new AssertDiv2ExpectedValues();
                }
                return this.mAssertDiv2ExpectedValues;
            }
        }
        
        public UICST236Window UICST236Window
        {
            get
            {
                if ((this.mUICST236Window == null))
                {
                    this.mUICST236Window = new UICST236Window();
                }
                return this.mUICST236Window;
            }
        }
        
        public UIDemoCalculatorWindowWindow UIDemoCalculatorWindowWindow
        {
            get
            {
                if ((this.mUIDemoCalculatorWindowWindow == null))
                {
                    this.mUIDemoCalculatorWindowWindow = new UIDemoCalculatorWindowWindow();
                }
                return this.mUIDemoCalculatorWindowWindow;
            }
        }
        #endregion
        
        #region Fields
        private EnterDataAndClickAddParams mEnterDataAndClickAddParams;
        
        private AssertAddExpectedValues mAssertAddExpectedValues;
        
        private EnterDataAndClickSubParams mEnterDataAndClickSubParams;
        
        private AssertSubExpectedValues mAssertSubExpectedValues;
        
        private EnterDataAndClickDivParams mEnterDataAndClickDivParams;
        
        private AssertDivExpectedValues mAssertDivExpectedValues;
        
        private EnterDataAndClickDiv2Params mEnterDataAndClickDiv2Params;
        
        private AssertDiv2ExpectedValues mAssertDiv2ExpectedValues;
        
        private UICST236Window mUICST236Window;
        
        private UIDemoCalculatorWindowWindow mUIDemoCalculatorWindowWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'EnterDataAndClickAdd'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class EnterDataAndClickAddParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%OneDrive%\Desktop\SimpleWinformsCalculator.exe'
        /// </summary>
        public string UIDemoCalculatorWindowWindowExePath = "C:\\Users\\Spide\\OneDrive\\Desktop\\SimpleWinformsCalculator.exe";
        
        /// <summary>
        /// Launch '%OneDrive%\Desktop\SimpleWinformsCalculator.exe'
        /// </summary>
        public string UIDemoCalculatorWindowWindowAlternateExePath = "%OneDrive%\\Desktop\\SimpleWinformsCalculator.exe";
        
        /// <summary>
        /// Type '10' in 'textInput1' text box
        /// </summary>
        public string UITextInput1EditText = "10";
        
        /// <summary>
        /// Type '{Tab}' in 'textInput1' text box
        /// </summary>
        public string UITextInput1EditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '10' in 'textInput2' text box
        /// </summary>
        public string UITextInput2EditText = "10";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertAdd'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertAddExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ControlType' property of 'textAnswer' text box equals 'Edit'
        /// </summary>
        public string UITextAnswerEditControlType = "Edit";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'EnterDataAndClickSub'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class EnterDataAndClickSubParams
    {
        
        #region Fields
        /// <summary>
        /// Type '20' in 'textInput1' text box
        /// </summary>
        public string UITextInput1EditText = "20";
        
        /// <summary>
        /// Type '{Tab}' in 'textInput1' text box
        /// </summary>
        public string UITextInput1EditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '10' in 'textInput2' text box
        /// </summary>
        public string UITextInput2EditText = "10";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertSub'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertSubExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ControlType' property of 'textAnswer' text box equals 'Edit'
        /// </summary>
        public string UITextAnswerEditControlType = "Edit";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'EnterDataAndClickDiv'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class EnterDataAndClickDivParams
    {
        
        #region Fields
        /// <summary>
        /// Type '2' in 'textInput1' text box
        /// </summary>
        public string UITextInput1EditText = "2";
        
        /// <summary>
        /// Type '{Tab}' in 'textInput1' text box
        /// </summary>
        public string UITextInput1EditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '3' in 'textInput2' text box
        /// </summary>
        public string UITextInput2EditText = "3";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertDiv'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertDivExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ControlType' property of 'textAnswer' text box equals 'Edit'
        /// </summary>
        public string UITextAnswerEditControlType = "Edit";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'EnterDataAndClickDiv2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class EnterDataAndClickDiv2Params
    {
        
        #region Fields
        /// <summary>
        /// Type '10' in 'textInput1' text box
        /// </summary>
        public string UITextInput1EditText = "10";
        
        /// <summary>
        /// Type '5' in 'textInput2' text box
        /// </summary>
        public string UITextInput2EditText = "5";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertDiv2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertDiv2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ControlType' property of 'textAnswer' text box equals 'Edit'
        /// </summary>
        public string UITextAnswerEditControlType = "Edit";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UICST236Window : WinWindow
    {
        
        public UICST236Window()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "CST 236";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "CabinetWClass";
            this.WindowTitles.Add("CST 236");
            #endregion
        }
        
        #region Properties
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("CST 236");
            #endregion
        }
        
        #region Properties
        public UISimpleWinformsCalculListItem UISimpleWinformsCalculListItem
        {
            get
            {
                if ((this.mUISimpleWinformsCalculListItem == null))
                {
                    this.mUISimpleWinformsCalculListItem = new UISimpleWinformsCalculListItem(this);
                }
                return this.mUISimpleWinformsCalculListItem;
            }
        }
        #endregion
        
        #region Fields
        private UISimpleWinformsCalculListItem mUISimpleWinformsCalculListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISimpleWinformsCalculListItem : WinListItem
    {
        
        public UISimpleWinformsCalculListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "SimpleWinformsCalculator.exe";
            this.WindowTitles.Add("CST 236");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("CST 236");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        
        public WinEdit UIDatemodifiedEdit
        {
            get
            {
                if ((this.mUIDatemodifiedEdit == null))
                {
                    this.mUIDatemodifiedEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIDatemodifiedEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Date modified";
                    this.mUIDatemodifiedEdit.WindowTitles.Add("CST 236");
                    #endregion
                }
                return this.mUIDatemodifiedEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        
        private WinEdit mUIDatemodifiedEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDemoCalculatorWindowWindow : WinWindow
    {
        
        public UIDemoCalculatorWindowWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Demo Calculator Windows Forms";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Demo Calculator Windows Forms");
            #endregion
        }
        
        #region Properties
        public UITextInput1Window UITextInput1Window
        {
            get
            {
                if ((this.mUITextInput1Window == null))
                {
                    this.mUITextInput1Window = new UITextInput1Window(this);
                }
                return this.mUITextInput1Window;
            }
        }
        
        public UITextInput2Window UITextInput2Window
        {
            get
            {
                if ((this.mUITextInput2Window == null))
                {
                    this.mUITextInput2Window = new UITextInput2Window(this);
                }
                return this.mUITextInput2Window;
            }
        }
        
        public UIAddWindow UIAddWindow
        {
            get
            {
                if ((this.mUIAddWindow == null))
                {
                    this.mUIAddWindow = new UIAddWindow(this);
                }
                return this.mUIAddWindow;
            }
        }
        
        public UITextAnswerWindow UITextAnswerWindow
        {
            get
            {
                if ((this.mUITextAnswerWindow == null))
                {
                    this.mUITextAnswerWindow = new UITextAnswerWindow(this);
                }
                return this.mUITextAnswerWindow;
            }
        }
        
        public UIDemoCalculatorWindowTitleBar UIDemoCalculatorWindowTitleBar
        {
            get
            {
                if ((this.mUIDemoCalculatorWindowTitleBar == null))
                {
                    this.mUIDemoCalculatorWindowTitleBar = new UIDemoCalculatorWindowTitleBar(this);
                }
                return this.mUIDemoCalculatorWindowTitleBar;
            }
        }
        
        public UISubtractWindow UISubtractWindow
        {
            get
            {
                if ((this.mUISubtractWindow == null))
                {
                    this.mUISubtractWindow = new UISubtractWindow(this);
                }
                return this.mUISubtractWindow;
            }
        }
        
        public UIMultiplyWindow UIMultiplyWindow
        {
            get
            {
                if ((this.mUIMultiplyWindow == null))
                {
                    this.mUIMultiplyWindow = new UIMultiplyWindow(this);
                }
                return this.mUIMultiplyWindow;
            }
        }
        
        public UIDivideWindow UIDivideWindow
        {
            get
            {
                if ((this.mUIDivideWindow == null))
                {
                    this.mUIDivideWindow = new UIDivideWindow(this);
                }
                return this.mUIDivideWindow;
            }
        }
        #endregion
        
        #region Fields
        private UITextInput1Window mUITextInput1Window;
        
        private UITextInput2Window mUITextInput2Window;
        
        private UIAddWindow mUIAddWindow;
        
        private UITextAnswerWindow mUITextAnswerWindow;
        
        private UIDemoCalculatorWindowTitleBar mUIDemoCalculatorWindowTitleBar;
        
        private UISubtractWindow mUISubtractWindow;
        
        private UIMultiplyWindow mUIMultiplyWindow;
        
        private UIDivideWindow mUIDivideWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITextInput1Window : WinWindow
    {
        
        public UITextInput1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textInput1";
            this.WindowTitles.Add("Demo Calculator Windows Forms");
            #endregion
        }
        
        #region Properties
        public WinEdit UITextInput1Edit
        {
            get
            {
                if ((this.mUITextInput1Edit == null))
                {
                    this.mUITextInput1Edit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITextInput1Edit.SearchProperties[WinEdit.PropertyNames.Name] = "Input Number 2";
                    this.mUITextInput1Edit.WindowTitles.Add("Demo Calculator Windows Forms");
                    #endregion
                }
                return this.mUITextInput1Edit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITextInput1Edit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITextInput2Window : WinWindow
    {
        
        public UITextInput2Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textInput2";
            this.WindowTitles.Add("Demo Calculator Windows Forms");
            #endregion
        }
        
        #region Properties
        public WinEdit UITextInput2Edit
        {
            get
            {
                if ((this.mUITextInput2Edit == null))
                {
                    this.mUITextInput2Edit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITextInput2Edit.WindowTitles.Add("Demo Calculator Windows Forms");
                    #endregion
                }
                return this.mUITextInput2Edit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITextInput2Edit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIAddWindow : WinWindow
    {
        
        public UIAddWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnAdd";
            this.WindowTitles.Add("Demo Calculator Windows Forms");
            #endregion
        }
        
        #region Properties
        public WinButton UIAddButton
        {
            get
            {
                if ((this.mUIAddButton == null))
                {
                    this.mUIAddButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIAddButton.SearchProperties[WinButton.PropertyNames.Name] = "Add";
                    this.mUIAddButton.WindowTitles.Add("Demo Calculator Windows Forms");
                    #endregion
                }
                return this.mUIAddButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIAddButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITextAnswerWindow : WinWindow
    {
        
        public UITextAnswerWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textAnswer";
            this.WindowTitles.Add("Demo Calculator Windows Forms");
            #endregion
        }
        
        #region Properties
        public WinEdit UITextAnswerEdit
        {
            get
            {
                if ((this.mUITextAnswerEdit == null))
                {
                    this.mUITextAnswerEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITextAnswerEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Answer";
                    this.mUITextAnswerEdit.WindowTitles.Add("Demo Calculator Windows Forms");
                    #endregion
                }
                return this.mUITextAnswerEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITextAnswerEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDemoCalculatorWindowTitleBar : WinTitleBar
    {
        
        public UIDemoCalculatorWindowTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Demo Calculator Windows Forms");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Demo Calculator Windows Forms");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISubtractWindow : WinWindow
    {
        
        public UISubtractWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnSubtract";
            this.WindowTitles.Add("Demo Calculator Windows Forms");
            #endregion
        }
        
        #region Properties
        public WinButton UISubtractButton
        {
            get
            {
                if ((this.mUISubtractButton == null))
                {
                    this.mUISubtractButton = new WinButton(this);
                    #region Search Criteria
                    this.mUISubtractButton.SearchProperties[WinButton.PropertyNames.Name] = "Subtract";
                    this.mUISubtractButton.WindowTitles.Add("Demo Calculator Windows Forms");
                    #endregion
                }
                return this.mUISubtractButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISubtractButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIMultiplyWindow : WinWindow
    {
        
        public UIMultiplyWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnMultiply";
            this.WindowTitles.Add("Demo Calculator Windows Forms");
            #endregion
        }
        
        #region Properties
        public WinButton UIMultiplyButton
        {
            get
            {
                if ((this.mUIMultiplyButton == null))
                {
                    this.mUIMultiplyButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMultiplyButton.SearchProperties[WinButton.PropertyNames.Name] = "Multiply";
                    this.mUIMultiplyButton.WindowTitles.Add("Demo Calculator Windows Forms");
                    #endregion
                }
                return this.mUIMultiplyButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIMultiplyButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDivideWindow : WinWindow
    {
        
        public UIDivideWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnDivide";
            this.WindowTitles.Add("Demo Calculator Windows Forms");
            #endregion
        }
        
        #region Properties
        public WinButton UIDivideButton
        {
            get
            {
                if ((this.mUIDivideButton == null))
                {
                    this.mUIDivideButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIDivideButton.SearchProperties[WinButton.PropertyNames.Name] = "Divide";
                    this.mUIDivideButton.WindowTitles.Add("Demo Calculator Windows Forms");
                    #endregion
                }
                return this.mUIDivideButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIDivideButton;
        #endregion
    }
}
