<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:d="http://schemas.microsoft.com/expression/blend/2006"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    mc:Ignorable="d">

    <!-- Resource dictionary entries should be defined here. -->
    <FontFamily x:Key="GlobalFont">/Microsoft.TeamFoundation.TestManagement.Client.Themes;Component/#Segoe UI</FontFamily>

    <Style x:Key="ShellWindowStyle"
           TargetType="{x:Type Window}">
        <Setter Property="Background"
                Value="{DynamicResource ShellBackgroundBrush}" />
        <Setter Property="Foreground"
                Value="{DynamicResource ShellForegroundBrush}" />
        <Setter Property="FontFamily"
                Value="{DynamicResource GlobalFont}" />
        <Setter Property="FontSize"
                Value="12" />
        <Setter Property="FontWeight"
                Value="Normal" />
        <Setter Property="FontStyle"
                Value="Normal" />
        <Setter Property="SnapsToDevicePixels"
                Value="True" />
    </Style>

    <Style x:Key="ShellMainWindowStyle"
           TargetType="{x:Type Window}"
           BasedOn="{StaticResource ShellWindowStyle}">
        <Setter Property="OverridesDefaultStyle"
                Value="True" />
        <Setter Property="BorderThickness"
                Value="1" />
        <Setter Property="BorderBrush"
                Value="{DynamicResource ShellWindowBorderBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Window}">
                    <Canvas Width="{TemplateBinding ActualWidth}"
                            Height="{TemplateBinding ActualHeight}"
                            Background="{TemplateBinding Background}">
                        <Border BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="Transparent"
                                Width="{TemplateBinding ActualWidth}"
                                Height="{TemplateBinding ActualHeight}">
                            <Border x:Name="innerBorder">
                                <AdornerDecorator>
                                    <ContentPresenter />
                                </AdornerDecorator>
                            </Border>
                        </Border>
                    </Canvas>
                    <ControlTemplate.Triggers>
                        <Trigger Property="WindowState"
                                 Value="Maximized">
                            <Setter TargetName="innerBorder"
                                    Property="BorderThickness"
                                    Value="2,3,2,0" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="WindowState"
                     Value="Maximized">
                <Setter Property="BorderThickness">
                    <Setter.Value>
                        <!-- Because we are frameless, we lie about our size, and windows thinks
                 we have a caption, we need to play some games to get the window contents
                 correctly positioned when we are maximized. This uses the windows border
                 width to offset. It turns out, this is the size by which the maximized
                 area is offset by when a window is maxmized -->
                        <Thickness Top="{x:Static SystemParameters.BorderWidth}"
                                   Left="{x:Static SystemParameters.BorderWidth}"
                                   Right="{x:Static SystemParameters.BorderWidth}"
                                   Bottom="{x:Static SystemParameters.BorderWidth}" />
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="SizeToContent"
                     Value="WidthAndHeight">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Window}">
                            <Border Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}">
                                <AdornerDecorator>
                                    <ContentPresenter />
                                </AdornerDecorator>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="BorderThickness"
                        Value="0" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Simple ScrollBar  This makes use of SimpleThumb, SimpleRepeatButton and SimpleScrollRepeatButton -->

    <Style x:Key="{x:Type ScrollBar}"
           TargetType="{x:Type ScrollBar}">
        <Setter Property="Stylus.IsFlicksEnabled"
                Value="false" />
        <Setter Property="Foreground"
                Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <Grid x:Name="GridRoot"
                          Background="{x:Null}">
                        <Grid.RowDefinitions>
                            <RowDefinition MaxHeight="18" />
                            <RowDefinition Height="*" />
                            <RowDefinition MaxHeight="18" />
                        </Grid.RowDefinitions>

                        <Rectangle Fill="{DynamicResource ScrollBarTrackBrush}"
                                   Stroke="{x:Null}"
                                   HorizontalAlignment="Stretch"
                                   Margin="0,15,0,15"
                                   VerticalAlignment="Stretch"
                                   Width="Auto"
                                   Height="Auto"
                                   Grid.RowSpan="3" />

                        <RepeatButton x:Name="DecreaseRepeat"
                                      Style="{DynamicResource RepeatButtonStyle}"
                                      Command="ScrollBar.LineUpCommand"
                                      Background="{x:Null}"
                                      BorderBrush="{x:Null}"
                                      BorderThickness="0"
                                      Foreground="{x:Null}">
                            <Path x:Name="DecreaseArrow"
                                  Stroke="{x:Null}"
                                  StrokeThickness="1"
                                  Data="M 0 4 L 8 4 L 4 0 Z"
                                  RenderTransformOrigin="0.5,0.5"
                                  Fill="{DynamicResource ScrollBarArrowBrush}">
                                <Path.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform ScaleX="1.25"
                                                        ScaleY="1" />
                                    </TransformGroup>
                                </Path.RenderTransform>
                            </Path>
                        </RepeatButton>

                        <!-- Track is a special layout container which sizes the thumb and the repeat button which do jump scrolling either side of it -->
                        <Track Grid.Row="1"
                               x:Name="PART_Track"
                               Orientation="Vertical"
                               IsDirectionReversed="true">
                            <Track.Thumb>
                                <Thumb Style="{DynamicResource ScrollBarThumbStyle}" />
                            </Track.Thumb>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton x:Name="PageUp"
                                              Style="{DynamicResource ScrollRepeatButtonStyle}"
                                              Command="ScrollBar.PageDownCommand"
                                              Background="{x:Null}"
                                              BorderBrush="{x:Null}"
                                              Foreground="{x:Null}" />
                            </Track.IncreaseRepeatButton>
                            <Track.DecreaseRepeatButton>
                                <RepeatButton x:Name="PageDown"
                                              Style="{DynamicResource ScrollRepeatButtonStyle}"
                                              Command="ScrollBar.PageUpCommand"
                                              Background="{x:Null}"
                                              BorderBrush="{x:Null}"
                                              Foreground="{x:Null}" />
                            </Track.DecreaseRepeatButton>
                        </Track>

                        <RepeatButton Grid.Row="2"
                                      x:Name="IncreaseRepeat"
                                      Style="{DynamicResource RepeatButtonStyle}"
                                      Command="ScrollBar.LineDownCommand"
                                      Background="{x:Null}"
                                      BorderBrush="{x:Null}"
                                      Foreground="{x:Null}">
                            <Grid x:Name="IncreaseArrowGrid">
                                <Path x:Name="IncreaseArrow"
                                      Stroke="{x:Null}"
                                      StrokeThickness="1"
                                      Data="M 0 0 L 4 4 L 8 0 Z"
                                      RenderTransformOrigin="0.5,0.5"
                                      Fill="{DynamicResource ScrollBarArrowBrush}">
                                    <Path.RenderTransform>
                                        <TransformGroup>
                                            <ScaleTransform ScaleX="1.25"
                                                            ScaleY="1" />
                                        </TransformGroup>
                                    </Path.RenderTransform>
                                </Path>
                            </Grid>
                        </RepeatButton>
                    </Grid>

                    <!-- This uses a single template for ScrollBar and rotate it to be Horizontal
					It also changes the commands so that the it does Left and Right instead of Up and Down Commands -->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver"
                                 SourceName="IncreaseRepeat"
                                 Value="True">
                            <Setter Property="Fill"
                                    TargetName="IncreaseArrow"
                                    Value="{DynamicResource ItemSelectionPrimaryBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="False">
                            <Setter Property="Fill"
                                    TargetName="DecreaseArrow"
                                    Value="{DynamicResource ForegroundDisabledBrush}" />
                            <Setter Property="Fill"
                                    TargetName="IncreaseArrow"
                                    Value="{DynamicResource ForegroundDisabledBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed"
                                 SourceName="IncreaseRepeat"
                                 Value="True">
                            <Setter Property="Fill"
                                    TargetName="IncreaseArrow"
                                    Value="{DynamicResource ScrollBarArrowBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed"
                                 SourceName="DecreaseRepeat"
                                 Value="True">
                            <Setter Property="Fill"
                                    TargetName="DecreaseArrow"
                                    Value="{DynamicResource ScrollBarArrowBrush}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver"
                                 SourceName="DecreaseRepeat"
                                 Value="True">
                            <Setter Property="Fill"
                                    TargetName="DecreaseArrow"
                                    Value="{DynamicResource ItemSelectionPrimaryBrush}" />
                        </Trigger>
                        <Trigger Property="Orientation"
                                 Value="Horizontal">

                            <!-- Rotate the ScrollBar from Vertical to Horizontal -->
                            <Setter Property="LayoutTransform"
                                    TargetName="GridRoot">
                                <Setter.Value>
                                    <RotateTransform Angle="-90" />
                                </Setter.Value>
                            </Setter>

                            <!-- Track is bound to Orientation internally, so we need to rotate it back to Vertical -->
                            <Setter TargetName="PART_Track"
                                    Property="Orientation"
                                    Value="Vertical" />

                            <!-- Change the commands to do Horizontal commands -->
                            <Setter Property="Command"
                                    Value="ScrollBar.LineLeftCommand"
                                    TargetName="DecreaseRepeat" />
                            <Setter Property="Command"
                                    Value="ScrollBar.LineRightCommand"
                                    TargetName="IncreaseRepeat" />
                            <Setter Property="Command"
                                    Value="ScrollBar.PageLeftCommand"
                                    TargetName="PageDown" />
                            <Setter Property="Command"
                                    Value="ScrollBar.PageRightCommand"
                                    TargetName="PageUp" />
                            <Setter Property="Background"
                                    TargetName="GridRoot"
                                    Value="{x:Null}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Background"
                Value="{DynamicResource ScrollBarTrackBrush}" />
        <Style.Triggers>
            <Trigger Property="Orientation"
                     Value="Horizontal">
                <Setter Property="Height"
                        Value="18" />
            </Trigger>
            <Trigger Property="Orientation"
                     Value="Vertical">
                <Setter Property="Width"
                        Value="18" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Simple Thumb - The Thumb is the draggable part of the Scrollbar -->
    <Style x:Key="ScrollBarThumbStyle"
           d:IsControlPart="True"
           TargetType="{x:Type Thumb}"
           BasedOn="{x:Null}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Grid x:Name="Grid"
                          Width="15">
                        <Rectangle HorizontalAlignment="Stretch"
                                   x:Name="Rectangle"
                                   VerticalAlignment="Stretch"
                                   Width="Auto"
                                   Height="Auto"
                                   RadiusX="3"
                                   RadiusY="3"
                                   Fill="{DynamicResource ScrollBarThumbBrush}"
                                   Stroke="{x:Null}"
                                   StrokeThickness="0"
                                   Margin="2,0,2,0" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused"
                                 Value="True">
                            <Setter Property="Fill"
                                    TargetName="Rectangle"
                                    Value="{DynamicResource ItemSelectionPrimaryBrush}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver"
                                 Value="True">
                            <Setter Property="Fill"
                                    TargetName="Rectangle"
                                    Value="{DynamicResource ItemSelectionPrimaryBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="False">
                            <Setter Property="Fill"
                                    TargetName="Rectangle"
                                    Value="{DynamicResource ScrollBarTrackBrush}" />
                        </Trigger>
                        <Trigger Property="IsDragging"
                                 Value="True">
                            <Setter Property="Fill"
                                    TargetName="Rectangle"
                                    Value="{DynamicResource ScrollBarArrowBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Simple ScrollRepeatButton Style - This RepeatButton is used above and below the Thumb in the Scrollbar. They are set to transparent si that they do not show over the scrollbar -->
    <Style x:Key="ScrollRepeatButtonStyle"
           d:IsControlPart="True"
           TargetType="{x:Type RepeatButton}">
        <Setter Property="Background"
                Value="Transparent" />
        <Setter Property="BorderBrush"
                Value="Transparent" />
        <Setter Property="IsTabStop"
                Value="false" />
        <Setter Property="Focusable"
                Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Grid>
                        <Rectangle Fill="{DynamicResource ScrollBarTrackBrush}"
                                   Stroke="{x:Null}"
                                   StrokeThickness="{TemplateBinding BorderThickness}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Simple Repeat Button - This is used by Simple ScrollBar for the up and down buttons -->
    <Style x:Key="RepeatButtonStyle"
           d:IsControlPart="True"
           TargetType="{x:Type RepeatButton}"
           BasedOn="{x:Null}">
        <Setter Property="Background"
                Value="{DynamicResource ColorInvisibleBrush}" />
        <Setter Property="BorderBrush"
                Value="{DynamicResource ScrollBarTrackBrush}" />
        <Setter Property="Focusable"
                Value="False" />
        <Setter Property="IsTabStop"
                Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Grid>
                        <Border x:Name="Border"
                                Background="{DynamicResource ScrollBarTrackBrush}"
                                BorderBrush="{DynamicResource ScrollBarTrackBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="1.5,1.5,1.5,1.5" />
                        <ContentPresenter HorizontalAlignment="Center"
                                          x:Name="ContentPresenter"
                                          VerticalAlignment="Center"
                                          Content="{TemplateBinding Content}"
                                          ContentTemplate="{TemplateBinding ContentTemplate}"
                                          ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsKeyboardFocused"
                                 Value="true">
                            <Setter Property="BorderBrush"
                                    TargetName="Border"
                                    Value="{DynamicResource ScrollBarTrackBrush}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver"
                                 Value="true">
                            <Setter Property="Background"
                                    TargetName="Border"
                                    Value="{DynamicResource ScrollBarTrackBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed"
                                 Value="true">
                            <Setter Property="Background"
                                    TargetName="Border"
                                    Value="{DynamicResource ScrollBarTrackBrush}" />
                            <Setter Property="BorderBrush"
                                    TargetName="Border"
                                    Value="{DynamicResource ScrollBarTrackBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Foreground"
                                    Value="{DynamicResource ForegroundDisabledBrush}" />
                            <Setter Property="BorderBrush"
                                    TargetName="Border"
                                    Value="{DynamicResource ScrollBarTrackBrush}" />
                            <Setter Property="Background"
                                    TargetName="Border"
                                    Value="{DynamicResource ScrollBarTrackBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground"
                Value="{DynamicResource ScrollBarThumbBrush}" />
    </Style>

    <ControlTemplate x:Key="WindowTemplateKey"
                     TargetType="{x:Type Window}">
        <Border Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}">
            <Grid>
                <AdornerDecorator>
                    <ContentPresenter />
                </AdornerDecorator>
                <ResizeGrip Visibility="Collapsed"
                            HorizontalAlignment="Right"
                            x:Name="WindowResizeGrip"
                            VerticalAlignment="Bottom"
                            IsTabStop="false" />
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="ResizeMode"
                               Value="CanResizeWithGrip" />
                    <Condition Property="WindowState"
                               Value="Normal" />
                </MultiTrigger.Conditions>
                <Setter Property="Visibility"
                        TargetName="WindowResizeGrip"
                        Value="Visible" />
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- Window Non-Client area controls -->
    <Style x:Key="WindowBaseButton"
           TargetType="{x:Type Button}"
           BasedOn="{x:Null}">
        <Setter Property="Width"
                Value="22" />
        <Setter Property="Height"
                Value="18" />
        <Setter Property="OverridesDefaultStyle"
                Value="True" />
        <Setter Property="SnapsToDevicePixels"
                Value="True" />
        <Setter Property="FocusVisualStyle"
                Value="{DynamicResource ShellButtonFocusVisualStyle}" />
        <Setter Property="Background"
                Value="{DynamicResource ColorInvisibleBrush}" />
        <Setter Property="BorderBrush"
                Value="{DynamicResource ColorInvisibleBrush}" />
        <Setter Property="IsTabStop"
                Value="False" />
        <Setter Property="Focusable"
                Value="False" />
    </Style>

    <Style x:Key="WindowCloseButton"
           TargetType="{x:Type Button}"
           BasedOn="{StaticResource WindowBaseButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">

                    <!-- We use Grid as a root because it is easy to add more elements to customize the button -->
                    <Grid x:Name="Grid">
                        <Border x:Name="Border"
                                Background="{DynamicResource WindowControlButtonBrush}"
                                BorderBrush="{DynamicResource ColorBlackBrush}"
                                BorderThickness="0"
                                Padding="{TemplateBinding Padding}"
                                Focusable="False"
                                CornerRadius="1.5">
                            <Path x:Name="Path"
                                  Stretch="Fill"
                                  StrokeLineJoin="Round"
                                  Fill="{DynamicResource ColorWhiteBrush}"
                                  Data="F1 M 1008.46,86.1669L 1011.71,82.9119L 1013.34,84.5369L 1010.09,87.7919L 1013.34,91.0469L 1011.71,92.6719L 1008.46,89.4169L 1005.21,92.6719L 1003.58,91.0469L 1006.83,87.7919L 1003.58,84.5369L 1005.21,82.9119L 1008.46,86.1669 Z "
                                  Width="12"
                                  Height="12"
                                  SnapsToDevicePixels="True"
                                  HorizontalAlignment="Center"
                                  VerticalAlignment="Center"
                                  Stroke="{DynamicResource WindowControlButtonStrokeBrush}"
                                  StrokeThickness="1" />
                        </Border>

                        <!-- Content Presenter is where the text content etc is placed by the control -->
                    </Grid>

                    <!--Each state sets a brush on the Border in the template -->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsKeyboardFocused"
                                 Value="true">
                            <Setter Property="Background"
                                    TargetName="Border"
                                    Value="{DynamicResource WindowControlButtonBrush}" />
                            <Setter Property="BorderBrush"
                                    TargetName="Border"
                                    Value="{DynamicResource ShellForegroundBrush}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver"
                                 Value="true">
                            <Setter Property="Background"
                                    TargetName="Border"
                                    Value="{DynamicResource WindowControlButtonHighlightBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed"
                                 Value="true">
                            <Setter Property="Background"
                                    TargetName="Border"
                                    Value="{DynamicResource WindowControlButtonPressedBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Foreground"
                                    Value="{DynamicResource ForegroundDisabledBrush}" />
                            <Setter Property="Fill"
                                    TargetName="Path"
                                    Value="{DynamicResource ForegroundDisabledBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- WINDOW MAXIMIZE BUTTON -->
    <Style x:Key="WindowMaximizeButton"
           TargetType="{x:Type Button}"
           BasedOn="{StaticResource WindowBaseButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">

                    <!-- We use Grid as a root because it is easy to add more elements to customize the button -->
                    <Grid x:Name="Grid">
                        <Border x:Name="Border"
                                Background="{DynamicResource WindowControlButtonBrush}"
                                BorderBrush="{DynamicResource ColorBlackBrush}"
                                BorderThickness="0"
                                Padding="{TemplateBinding Padding}"
                                Focusable="False"
                                CornerRadius="1.5">
                            <Path Width="12"
                                  Height="10"
                                  Fill="{DynamicResource ColorWhiteBrush}"
                                  Stretch="Fill"
                                  Stroke="{DynamicResource WindowControlButtonStrokeBrush}"
                                  StrokeLineJoin="Round"
                                  Data="M3,3.0 L3,7.0 9,7.0 9,3.0 3,3.0 z M0,0 L12,0 12,10 0,10 0,0 z"
                                  SnapsToDevicePixels="True" />
                        </Border>

                        <!-- Content Presenter is where the text content etc is placed by the control -->
                    </Grid>

                    <!--Each state sets a brush on the Border in the template -->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsKeyboardFocused"
                                 Value="true">
                            <Setter Property="Background"
                                    TargetName="Border"
                                    Value="{DynamicResource WindowControlButtonBrush}" />
                            <Setter Property="BorderBrush"
                                    TargetName="Border"
                                    Value="{DynamicResource ShellForegroundBrush}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver"
                                 Value="true">
                            <Setter Property="Background"
                                    TargetName="Border"
                                    Value="{DynamicResource WindowControlButtonHighlightBrush}" />
                            <Setter Property="BorderBrush"
                                    TargetName="Border"
                                    Value="{DynamicResource ColorWhiteBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed"
                                 Value="true">
                            <Setter Property="Background"
                                    TargetName="Border"
                                    Value="{DynamicResource WindowControlButtonPressedBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Foreground"
                                    Value="{DynamicResource ForegroundDisabledBrush}" />
                            <Setter Property="Background"
                                    TargetName="Border"
                                    Value="{DynamicResource ShellInputBackgroundBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- WINDOW MINIMIZE BUTTON -->
    <Style x:Key="WindowMinimizeButton"
           TargetType="{x:Type Button}"
           BasedOn="{StaticResource WindowBaseButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">

                    <!-- We use Grid as a root because it is easy to add more elements to customize the button -->
                    <Grid x:Name="Grid">
                        <Border x:Name="Border"
                                Background="{DynamicResource WindowControlButtonBrush}"
                                BorderBrush="{DynamicResource ColorBlackBrush}"
                                BorderThickness="0"
                                Padding="{TemplateBinding Padding}"
                                Focusable="False"
                                CornerRadius="1.5">
                            <Rectangle Margin="0,6,0,0"
                                       Width="12"
                                       Height="5"
                                       Fill="{DynamicResource ColorWhiteBrush}"
                                       Stroke="{DynamicResource WindowControlButtonStrokeBrush}"
                                       StrokeLineJoin="Round"
                                       VerticalAlignment="Center"
                                       HorizontalAlignment="Center"
                                       SnapsToDevicePixels="True" />
                        </Border>

                        <!-- Content Presenter is where the text content etc is placed by the control -->
                    </Grid>

                    <!--Each state sets a brush on the Border in the template -->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsKeyboardFocused"
                                 Value="true">
                            <Setter Property="Background"
                                    TargetName="Border"
                                    Value="{DynamicResource WindowControlButtonBrush}" />
                            <Setter Property="BorderBrush"
                                    TargetName="Border"
                                    Value="{DynamicResource ShellForegroundBrush}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver"
                                 Value="true">
                            <Setter Property="Background"
                                    TargetName="Border"
                                    Value="{DynamicResource WindowControlButtonHighlightBrush}" />
                            <Setter Property="BorderBrush"
                                    TargetName="Border"
                                    Value="{DynamicResource ColorWhiteBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed"
                                 Value="true">
                            <Setter Property="Background"
                                    TargetName="Border"
                                    Value="{DynamicResource WindowControlButtonPressedBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Foreground"
                                    Value="{DynamicResource ForegroundDisabledBrush}" />
                            <Setter Property="Background"
                                    TargetName="Border"
                                    Value="{DynamicResource ShellInputBackgroundBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- WINDOW RESTORE BUTTON -->
    <Style x:Key="WindowRestoreButton"
           TargetType="{x:Type Button}"
           BasedOn="{StaticResource WindowBaseButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">

                    <!-- We use Grid as a root because it is easy to add more elements to customize the button -->
                    <Grid x:Name="Grid">
                        <Border x:Name="Border"
                                Background="{DynamicResource WindowControlButtonBrush}"
                                BorderBrush="{DynamicResource ColorBlackBrush}"
                                BorderThickness="0"
                                Padding="{TemplateBinding Padding}"
                                Focusable="False"
                                CornerRadius="1.5">
                            <Path Width="10"
                                  Height="10"
                                  Fill="{DynamicResource ColorWhiteBrush}"
                                  Stretch="Fill"
                                  Stroke="{DynamicResource WindowControlButtonStrokeBrush}"
                                  StrokeLineJoin="Round"
                                  Data="M3,3.0 L3,7.0 9,7.0 9,3.0 3,3.0 z M0,0 L12,0 12,10 0,10 0,0 z"
                                  Margin="2,0,0,2"
                                  HorizontalAlignment="Center"
                                  VerticalAlignment="Center"
                                  SnapsToDevicePixels="True" />
                        </Border>
                        <Rectangle Fill="#FFFFFFFF"
                                   Stroke="#FF000000"
                                   Width="10"
                                   Height="10"
                                   HorizontalAlignment="Center"
                                   VerticalAlignment="Center"
                                   Margin="0,2,2,0"
                                   SnapsToDevicePixels="True" />
                        <Path Fill="{DynamicResource ColorWhiteBrush}"
                              Stretch="Fill"
                              Stroke="{DynamicResource WindowControlButtonStrokeBrush}"
                              StrokeLineJoin="Round"
                              Data="M3,3.0 L3,7.0 9,7.0 9,3.0 3,3.0 z M0,0 L12,0 12,10 0,10 0,0 z"
                              HorizontalAlignment="Center"
                              Margin="0,2,2,0"
                              VerticalAlignment="Center"
                              Width="10"
                              Height="10"
                              SnapsToDevicePixels="True" />

                        <!-- Content Presenter is where the text content etc is placed by the control -->
                    </Grid>

                    <!--Each state sets a brush on the Border in the template -->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsKeyboardFocused"
                                 Value="true">
                            <Setter Property="Background"
                                    TargetName="Border"
                                    Value="{DynamicResource WindowControlButtonBrush}" />
                            <Setter Property="BorderBrush"
                                    TargetName="Border"
                                    Value="{DynamicResource ShellForegroundBrush}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver"
                                 Value="true">
                            <Setter Property="Background"
                                    TargetName="Border"
                                    Value="{DynamicResource WindowControlButtonHighlightBrush}" />
                            <Setter Property="BorderBrush"
                                    TargetName="Border"
                                    Value="{DynamicResource ColorWhiteBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed"
                                 Value="true">
                            <Setter Property="Background"
                                    TargetName="Border"
                                    Value="{DynamicResource WindowControlButtonPressedBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Foreground"
                                    Value="{DynamicResource ForegroundDisabledBrush}" />
                            <Setter Property="Background"
                                    TargetName="Border"
                                    Value="{DynamicResource ShellInputBackgroundBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>