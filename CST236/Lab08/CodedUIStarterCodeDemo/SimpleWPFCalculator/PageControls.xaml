<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:WpfControls="clr-namespace:Microsoft.TeamFoundation.TestManagement.Client.WpfControls;assembly=Microsoft.TeamFoundation.TestManagement.Client.WpfControls"
                    xmlns:tcm="clr-namespace:Microsoft.TeamFoundation.TestManagement.Client;assembly=Microsoft.TeamFoundation.TestManagement.Client">

    <!-- Default TextBox -->
    <Style TargetType="{x:Type TextBox}">
        <Setter Property="KeyboardNavigation.TabNavigation"
                Value="None" />
        <Setter Property="FocusVisualStyle"
                Value="{x:Null}" />
        <Setter Property="AllowDrop"
                Value="true" />
        <Setter Property="BorderThickness"
                Value="1" />
        <Setter Property="BorderBrush"
                Value="{DynamicResource PageInputBorderBrush}" />
        <Setter Property="Background"
                Value="{DynamicResource PageInputBackgroundBrush}" />
        <Setter Property="Foreground"
                Value="{DynamicResource PageInputForegroundBrush}" />
        <Setter Property="OverridesDefaultStyle"
                Value="True" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border x:Name="Border"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="1.5"
                            Padding="2">

                        <!-- The implementation places the Content into the ScrollViewer. It must be named PART_ContentHost for the control to function -->
                        <ScrollViewer x:Name="PART_ContentHost"
                                      Background="{TemplateBinding Background}"
                                      Foreground="{TemplateBinding Foreground}"
                                      VerticalAlignment="Stretch"
                                      VerticalContentAlignment="Center"
                                      Padding="1" />

                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled"
                                 Value="False">
                            <Setter Property="Background"
                                    TargetName="Border"
                                    Value="{DynamicResource PageInputBackgroundBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled"
                     Value="False">
                <Setter Property="Foreground"
                        Value="{DynamicResource ForegroundDisabledBrush}" />
            </Trigger>
            <Trigger Property="IsKeyboardFocused"
                     Value="True">
                <Setter Property="BorderBrush"
                        Value="{DynamicResource PageForegroundAccentBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- ComboBox 
	This uses the ComboBoxToggleButton to expand and collapse a Popup control
	SimpleScrollViewer to allow items to be scrolled and SimpleComboBoxItem to define the look of each item 
	The Popup shows a list of items in a StackPanel-->
    <Style TargetType="{x:Type ComboBox}">
        <Setter Property="SnapsToDevicePixels"
                Value="true" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Border Background="{DynamicResource PageInputBackgroundBrush}"
                            BorderBrush="{DynamicResource PageInputBorderBrush}"
                            BorderThickness="1"
                            CornerRadius="1.5">
                        <Grid>
                            <!-- The ToggleButton is databound to the ComboBox itself to toggle IsDropDownOpen -->
                            <ToggleButton x:Name="ToggleButton"
                                          Focusable="false"
                                          IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                          ClickMode="Press"
                                          HorizontalContentAlignment="Stretch"
                                          VerticalContentAlignment="Stretch"
                                          Width="Auto"
                                          Height="Auto"
                                          Style="{DynamicResource PageComboBoxToggleButton}" />
                            <ContentPresenter x:Name="ContentSite"
                                              Content="{TemplateBinding SelectionBoxItem}"
                                              ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                              ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                              IsHitTestVisible="False"
                                              HorizontalAlignment="Left"
                                              VerticalAlignment="Center"
                                              Margin="5,0,20,0" />

                            <!-- The TextBox must be named PART_EditableTextBox or ` will not recognize it -->
                            <TextBox Visibility="Collapsed"
                                     x:Name="PART_EditableTextBox"
                                     Style="{DynamicResource PageComboBoxTextBoxStyle}"
                                     Focusable="True"
                                     IsReadOnly="{TemplateBinding IsReadOnly}"
                                     BorderBrush="{x:Null}"
                                     BorderThickness="0"
                                     Margin="5,0,20,0"
                                     VerticalAlignment="Center" />

                            <!-- The Popup shows the list of items in the ComboBox. IsOpen is databound to IsDropDownOpen which is toggled via the ComboBoxToggleButton -->
                            <Popup IsOpen="{TemplateBinding IsDropDownOpen}"
                                   Placement="Bottom"
                                   x:Name="Popup"
                                   Focusable="False"
                                   AllowsTransparency="True"
                                   PopupAnimation="Slide"
                                   Width="Auto"
                                   Height="Auto">
                                <Border x:Name="DropDownBorder"
                                        Style="{DynamicResource PageComboBoxPopupStyle}"
                                        SnapsToDevicePixels="True"
                                        MaxHeight="{TemplateBinding MaxDropDownHeight}"
                                        MinWidth="{TemplateBinding ActualWidth}">
                                    <ScrollViewer SnapsToDevicePixels="True"
                                                  HorizontalScrollBarVisibility="Auto"
                                                  VerticalScrollBarVisibility="Auto"
                                                  CanContentScroll="True"
                                                  Padding="5">

                                        <!-- The StackPanel is used to display the children by setting IsItemsHost to be True -->
                                        <ItemsPresenter SnapsToDevicePixels="True"
                                                        KeyboardNavigation.DirectionalNavigation="Contained" />

                                    </ScrollViewer>
                                </Border>
                            </Popup>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <!-- This forces the DropDown to have a minimum size if it is empty -->
                        <Trigger Property="HasItems"
                                 Value="false">
                            <Setter Property="MinHeight"
                                    Value="32"
                                    TargetName="DropDownBorder" />
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Foreground"
                                    Value="{DynamicResource ForegroundDisabledBrush}" />
                        </Trigger>
                        <Trigger Property="IsGrouping"
                                 Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll"
                                    Value="false" />
                        </Trigger>
                        <Trigger Property="AllowsTransparency"
                                 SourceName="Popup"
                                 Value="true">
                            <Setter Property="Margin"
                                    TargetName="DropDownBorder"
                                    Value="0,2,0,0" />
                        </Trigger>
                        <Trigger Property="IsEditable"
                                 Value="true">
                            <Setter Property="IsTabStop"
                                    Value="false" />
                            <Setter Property="Visibility"
                                    Value="Visible"
                                    TargetName="PART_EditableTextBox" />
                            <Setter Property="Visibility"
                                    Value="Hidden"
                                    TargetName="ContentSite" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Background"
                Value="Transparent" />
        <Setter Property="Foreground"
                Value="{DynamicResource PageInputForegroundBrush}" />
        <Setter Property="MinHeight"
                Value="23" />
        <Setter Property="MinWidth"
                Value="0" />
        <Setter Property="OverridesDefaultStyle"
                Value="True" />
        <Setter Property="Padding"
                Value="0" />
    </Style>

    <!-- ComboBoxItem
	This is used for each item inside of the ComboBox. You can change the selected color of each item below-->
    <Style TargetType="{x:Type ComboBoxItem}">
        <Setter Property="SnapsToDevicePixels"
                Value="true" />
        <Setter Property="Padding"
                Value="3" />
        <Setter Property="Background"
                Value="Transparent" />
        <Setter Property="OverridesDefaultStyle"
                Value="True" />
        <Setter Property="HorizontalContentAlignment"
                Value="Stretch" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Border x:Name="InnerBorder"
                            Width="Auto"
                            Height="Auto"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            Padding="{TemplateBinding Padding}"
                            BorderThickness="1.5"
                            CornerRadius="1.5">
                        <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          Content="{TemplateBinding Content}"
                                          ContentTemplate="{TemplateBinding ContentTemplate}"
                                          HorizontalAlignment="Left"
                                          VerticalAlignment="Center" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsHighlighted"
                                 Value="True">
                            <Setter Property="BorderBrush"
                                    TargetName="InnerBorder"
                                    Value="{DynamicResource PageItemSelectionBorderBrush}" />
                            <Setter Property="Background"
                                    TargetName="InnerBorder"
                                    Value="{DynamicResource PageItemSelectionGradientBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="False">
                            <Setter Property="Foreground"
                                    Value="{DynamicResource ForegroundDisabledBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground"
                Value="{DynamicResource PageInputForegroundBrush}" />
    </Style>

    <!-- ComboBox Toggle Button
	This is used in ComboBox to expand and collapse the ComboBox Popup-->
    <Style x:Key="PageComboBoxToggleButton"
           TargetType="{x:Type ToggleButton}">
        <Setter Property="Background"
                Value="{DynamicResource ColorInvisibleBrush}" />
        <Setter Property="Foreground"
                Value="{DynamicResource ColorInvisibleBrush}" />
        <Setter Property="HorizontalContentAlignment"
                Value="Center" />
        <Setter Property="VerticalContentAlignment"
                Value="Center" />
        <Setter Property="Padding"
                Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid Margin="0">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="20" />
                        </Grid.ColumnDefinitions>
                        <!-- This border is what makes the button clickable
                            across it's whole length. Remove at your peril -->
                        <Border Grid.ColumnSpan="2"
                                Background="Transparent"
                                HorizontalAlignment="Stretch"
                                VerticalAlignment="Stretch" />

                        <Border Background="{DynamicResource PageButtonGradientBrush}"
                                CornerRadius="3"
                                BorderThickness="1"
                                BorderBrush="{DynamicResource PageButtonBorderBrush}"
                                x:Name="ToggleButton"
                                SnapsToDevicePixels="True"
                                Margin="1"
                                Grid.Column="1">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="0.48*" />
                                    <RowDefinition Height="0.52*" />
                                </Grid.RowDefinitions>
                                <Border x:Name="phong"
                                        HorizontalAlignment="Stretch"
                                        Margin="2,1,2,0"
                                        BorderThickness="1"
                                        CornerRadius="1"
                                        SnapsToDevicePixels="True"
                                        Background="{DynamicResource PageButtonPhongGradientBrush}"
                                        BorderBrush="{DynamicResource PageButtonPhongBorderBrush}"
                                        Opacity="0.6" />
                                <Path x:Name="Arrow"
                                      HorizontalAlignment="Center"
                                      VerticalAlignment="Center"
                                      Fill="{DynamicResource PageInputGlyphBrush}"
                                      Data="M 0 0 L 4 4 L 8 0 Z"
                                      RenderTransformOrigin="0.5,0.5"
                                      StrokeThickness="0"
                                      Margin="5,0,5,0"
                                      BitmapEffect="{DynamicResource PageButtonContentShadowEffect}"
                                      Grid.Row="0"
                                      Grid.RowSpan="2">
                                    <Path.RenderTransform>
                                        <ScaleTransform ScaleX="1.25"
                                                        ScaleY="1" />
                                    </Path.RenderTransform>
                                </Path>
                            </Grid>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver"
                                 Value="true">
                            <Setter Property="Background"
                                    TargetName="ToggleButton"
                                    Value="{DynamicResource PageButtonGradientFocusedBrush}" />
                        </Trigger>
                        <Trigger Property="IsChecked"
                                 Value="true">
                            <Setter Property="Background"
                                    TargetName="ToggleButton"
                                    Value="{DynamicResource PageButtonGradientPressedBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="False">
                            <Setter Property="Foreground"
                                    Value="{DynamicResource ForegroundDisabledBrush}" />
                            <Setter Property="Background"
                                    TargetName="ToggleButton"
                                    Value="{DynamicResource PageButtonGradientDisabledBrush}" />
                            <Setter Property="Fill"
                                    TargetName="Arrow"
                                    Value="{DynamicResource PageButtonForegroundDisabledBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="OverridesDefaultStyle"
                Value="True" />
    </Style>

    <!-- ComboBox Popup -->
    <Style x:Key="PageComboBoxPopupStyle"
           TargetType="{x:Type Border}">
        <Setter Property="CornerRadius"
                Value="1.5" />
        <Setter Property="BorderThickness"
                Value="1" />
        <Setter Property="Background"
                Value="{DynamicResource PageBackgroundBrush_90Transparent}" />
        <Setter Property="BorderBrush"
                Value="{DynamicResource PagePopupBorderBrush}" />
        <Setter Property="OverridesDefaultStyle"
                Value="True" />
    </Style>

    <!-- ComboBox Editable TextBox -->
    <Style x:Key="PageComboBoxTextBoxStyle"
           TargetType="{x:Type TextBox}">
        <Setter Property="FocusVisualStyle"
                Value="{x:Null}" />
        <Setter Property="AllowDrop"
                Value="true" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <!-- The implementation places the Content into the ScrollViewer. It must be named PART_ContentHost for the control to function -->
                    <ScrollViewer x:Name="PART_ContentHost"
                                  Background="Transparent"
                                  Focusable="False"
                                  HorizontalScrollBarVisibility="Hidden"
                                  VerticalScrollBarVisibility="Hidden"
                                  Foreground="{DynamicResource PageInputForegroundBrush}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="BorderBrush"
                Value="{x:Null}" />
        <Setter Property="Foreground"
                Value="{DynamicResource PageInputForegroundBrush}" />
        <Setter Property="BorderThickness"
                Value="0" />
        <Setter Property="MinHeight"
                Value="0" />
        <Setter Property="MinWidth"
                Value="0" />
        <Setter Property="OverridesDefaultStyle"
                Value="True" />
        <Style.Triggers>
            <Trigger Property="IsEnabled"
                     Value="False">
                <Setter Property="Foreground"
                        Value="{DynamicResource ForegroundDisabledBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Default Hyperlink -->
    <Style TargetType="{x:Type Hyperlink}">
        <Setter Property="TextDecorations"
                Value="{x:Null}" />
        <Setter Property="Foreground"
                Value="{DynamicResource PageLinkTextBrush}" />
        <Style.Triggers>
            <Trigger Property="IsEnabled"
                     Value="False">
                <Setter Property="Foreground"
                        Value="{DynamicResource ForegroundDisabledBrush}" />
            </Trigger>
            <Trigger Property="IsMouseOver"
                     Value="True">
                <Setter Property="Foreground"
                        Value="{DynamicResource PageLinkHoverBrush}" />
                <Setter Property="TextDecorations">
                    <Setter.Value>
                        <TextDecorationCollection>
                            <TextDecoration Location="Underline" />
                        </TextDecorationCollection>
                    </Setter.Value>
                </Setter>
                <Setter Property="ForceCursor"
                        Value="True" />
                <Setter Property="Cursor"
                        Value="Hand" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- ToolTip -->
    <Style TargetType="{x:Type ToolTip}">
        <Setter Property="HorizontalContentAlignment"
                Value="Left" />
        <Setter Property="VerticalContentAlignment"
                Value="Center" />
        <Setter Property="Foreground"
                Value="{DynamicResource PageToolTipForegroundBrush}" />
        <Setter Property="MaxWidth"
                Value="600" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToolTip}">
                    <Border Style="{DynamicResource PageToolTipPopupStyle}">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          RecognizesAccessKey="True" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ToolTip Popup -->
    <Style x:Key="PageToolTipPopupStyle"
           TargetType="{x:Type Border}">
        <Setter Property="CornerRadius"
                Value="3" />
        <Setter Property="BorderThickness"
                Value="1" />
        <Setter Property="Padding"
                Value="6" />
        <Setter Property="Background"
                Value="{DynamicResource PageToolTipGradientBrush}" />
        <Setter Property="BorderBrush"
                Value="{DynamicResource PageToolTipBorderBrush}" />
        <Setter Property="OverridesDefaultStyle"
                Value="True" />
    </Style>

    <!-- Button -->
    <Style x:Key="{x:Type Button}"
           TargetType="{x:Type Button}">
        <Setter Property="BorderThickness"
                Value="1" />
        <Setter Property="Foreground"
                Value="{DynamicResource PageButtonForegroundBrush}" />
        <Setter Property="HorizontalContentAlignment"
                Value="Center" />
        <Setter Property="VerticalContentAlignment"
                Value="Center" />
        <Setter Property="Padding"
                Value="1" />
        <Setter Property="OverridesDefaultStyle"
                Value="True" />
        <Setter Property="MinHeight"
                Value="23" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{DynamicResource PageButtonGradientBrush}"
                            CornerRadius="6"
                            BorderThickness="1"
                            BorderBrush="{DynamicResource PageButtonBorderBrush}"
                            x:Name="border"
                            SnapsToDevicePixels="True">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="0.48*" />
                                <RowDefinition Height="0.52*" />
                            </Grid.RowDefinitions>
                            <Border HorizontalAlignment="Stretch"
                                    Margin="3,1,3,0"
                                    BorderThickness="1"
                                    CornerRadius="4"
                                    x:Name="phong"
                                    Opacity="0.6"
                                    SnapsToDevicePixels="True"
                                    Background="{DynamicResource PageButtonPhongGradientBrush}"
                                    BorderBrush="{DynamicResource PageButtonPhongBorderBrush}" />
                            <Border Grid.Row="0"
                                    Grid.RowSpan="2"
                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                <ContentPresenter SnapsToDevicePixels="True"
                                                  RecognizesAccessKey="True"
                                                  HorizontalAlignment="Center"
                                                  VerticalAlignment="Center"
                                                  Margin="{TemplateBinding Padding}" />
                            </Border>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsKeyboardFocused"
                                 Value="true">
                            <Setter Property="BitmapEffect"
                                    TargetName="border"
                                    Value="{DynamicResource PageButtonFocusedBitmapEffect}" />
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Foreground"
                                    Value="{DynamicResource PageButtonForegroundDisabledBrush}" />
                            <Setter Property="Background"
                                    TargetName="border"
                                    Value="{DynamicResource PageButtonGradientDisabledBrush}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver"
                                 Value="True">
                            <Setter Property="Background"
                                    TargetName="border"
                                    Value="{DynamicResource PageButtonGradientFocusedBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed"
                                 Value="True">
                            <Setter Property="Background"
                                    TargetName="border"
                                    Value="{DynamicResource PageButtonGradientPressedBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ToolBar -->
    <Style x:Key="{x:Type ToolBar}"
           TargetType="{x:Type ToolBar}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToolBar}">
                    <Grid SnapsToDevicePixels="true"
                          x:Name="Grid">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Border Grid.Column="0"
                                x:Name="MainPanelBorder"
                                Background="{DynamicResource PageToolBarGradientBrush}"
                                BorderBrush="{DynamicResource PageInputBorderBrush}"
                                BorderThickness="1,1,0,1"
                                CornerRadius="3,0,0,0"
                                Padding="{TemplateBinding Padding}">
                            <DockPanel KeyboardNavigation.TabIndex="1"
                                       KeyboardNavigation.TabNavigation="Local">
                                <Thumb IsEnabled="False"
                                       Visibility="Hidden"
                                       Margin="-3,-1,0,0"
                                       x:Name="ToolBarThumb"
                                       Style="{DynamicResource PageToolBarThumbStyle}"
                                       Width="10"
                                       Background="{x:Null}"
                                       Padding="6,5,1,6" />
                                <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                  HorizontalAlignment="Center"
                                                  Margin="4,0,4,0"
                                                  x:Name="ToolBarHeader"
                                                  VerticalAlignment="Center"
                                                  ContentSource="Header" />
                                <ToolBarPanel SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                              Margin="0,1,2,2"
                                              x:Name="PART_ToolBarPanel"
                                              IsItemsHost="true" />
                            </DockPanel>
                        </Border>
                        <Grid HorizontalAlignment="Right"
                              Grid.Column="1"
                              x:Name="OverflowGrid">
                            <ToggleButton IsEnabled="{TemplateBinding HasOverflowItems}"
                                          IsTabStop="False"
                                          FocusVisualStyle="{x:Null}"
                                          x:Name="OverflowButton"
                                          Style="{DynamicResource PageToolBarHorizontalOverflowButtonStyle}"
                                          Background="{DynamicResource PageToolBarGradientBrush}"
                                          IsChecked="{Binding Path=IsOverflowOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                          ClickMode="Press"
                                          BorderBrush="{DynamicResource ColorInvisibleBrush}"
                                          Foreground="{DynamicResource ColorInvisibleBrush}" />
                            <Popup Focusable="false"
                                   AllowsTransparency="true"
                                   IsOpen="{Binding Path=IsOverflowOpen, RelativeSource={RelativeSource TemplatedParent}}"
                                   Placement="Bottom"
                                   PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
                                   StaysOpen="false"
                                   x:Name="OverflowPopup">
                                <Border Background="{DynamicResource PageBackgroundBrush_90Transparent}"
                                        BorderBrush="{DynamicResource PageInputBorderBrush}"
                                        BorderThickness="1"
                                        CornerRadius="1.5">
                                    <ToolBarOverflowPanel Focusable="true"
                                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                          FocusVisualStyle="{x:Null}"
                                                          Margin="2"
                                                          x:Name="PART_ToolBarOverflowPanel"
                                                          KeyboardNavigation.DirectionalNavigation="Cycle"
                                                          KeyboardNavigation.TabNavigation="Cycle"
                                                          WrapWidth="200" />
                                </Border>
                            </Popup>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsOverflowOpen"
                                 Value="true">
                            <Setter Property="IsEnabled"
                                    TargetName="ToolBarThumb"
                                    Value="false" />
                        </Trigger>
                        <Trigger Property="Header"
                                 Value="{x:Null}">
                            <Setter Property="Visibility"
                                    TargetName="ToolBarHeader"
                                    Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="ToolBarTray.IsLocked"
                                 Value="true">
                            <Setter Property="Visibility"
                                    TargetName="ToolBarThumb"
                                    Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Foreground"
                                    Value="{DynamicResource ForegroundDisabledBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ToolBar Vertical Overflow Button-->
    <Style x:Key="PageToolBarVerticalOverflowButtonStyle"
           TargetType="{x:Type ToggleButton}">
        <Setter Property="Background"
                Value="{DynamicResource PageToolBarGradientBrush}" />
        <Setter Property="MinHeight"
                Value="0" />
        <Setter Property="MinWidth"
                Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border SnapsToDevicePixels="true"
                            x:Name="Bd"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{DynamicResource PageInputBorderBrush}"
                            BorderThickness="0,1,1,1"
                            CornerRadius="0,1.5,0,0">
                        <Grid SnapsToDevicePixels="true"
                              HorizontalAlignment="Right"
                              Margin="2,7,2,2"
                              VerticalAlignment="Bottom"
                              Width="7"
                              Height="6">
                            <Path Stroke="White"
                                  Data="M 1.5 1 L 1.5 6"
                                  Visibility="Hidden" />
                            <Path Stroke="{TemplateBinding Foreground}"
                                  Data="M 0.5 0 L 0.5 5"
                                  Visibility="Hidden" />
                            <Path Fill="White"
                                  Data="M 3.5 0.5 L 7 3.5 L 4 6.5 Z"
                                  Visibility="Hidden" />
                            <Path Fill="{TemplateBinding Foreground}"
                                  Data="M 3 -0.5 L 6 2.5 L 3 5.5 Z"
                                  RenderTransformOrigin="0.5,0.5">
                                <Path.RenderTransform>
                                    <ScaleTransform ScaleX="1"
                                                    ScaleY="1.25" />
                                </Path.RenderTransform>
                            </Path>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver"
                                 Value="true">
                            <Setter Property="Background"
                                    TargetName="Bd"
                                    Value="{DynamicResource PageToolBarButtonHoverBrush}" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused"
                                 Value="true">
                            <Setter Property="Background"
                                    TargetName="Bd"
                                    Value="{DynamicResource PageToolBarButtonHoverBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Foreground"
                                    Value="{DynamicResource ForegroundDisabledBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="BorderBrush"
                Value="{DynamicResource PageInputBorderBrush}" />
        <Setter Property="Foreground"
                Value="{DynamicResource PageToolBarGlyphBrush}" />
        <Setter Property="BorderThickness"
                Value="0,1,1,1" />
    </Style>

    <!-- Toolbar Horizontal Overflow Button -->
    <Style x:Key="PageToolBarHorizontalOverflowButtonStyle"
           TargetType="{x:Type ToggleButton}">
        <Setter Property="MinHeight"
                Value="0" />
        <Setter Property="MinWidth"
                Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border SnapsToDevicePixels="true"
                            x:Name="Bd"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{DynamicResource PageInputBorderBrush}"
                            BorderThickness="0,1,1,1"
                            Padding="7,2,2,2"
                            CornerRadius="0,3,0,0">
                        <Path Fill="{DynamicResource PageToolBarGlyphBrush}"
                              Data="M -0.5 3 L 5.5 3 L 2.5 6 Z"
                              RenderTransformOrigin="0.5,0.5"
                              x:Name="path"
                              VerticalAlignment="Bottom"
                              HorizontalAlignment="Right">
                            <Path.RenderTransform>
                                <ScaleTransform ScaleX="1.25"
                                                ScaleY="1" />
                            </Path.RenderTransform>
                        </Path>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver"
                                 Value="true">
                            <Setter Property="Background"
                                    TargetName="Bd"
                                    Value="{DynamicResource PageToolBarButtonHoverBrush}" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused"
                                 Value="true">
                            <Setter Property="Background"
                                    TargetName="Bd"
                                    Value="{DynamicResource PageToolBarButtonHoverBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Foreground"
                                    Value="#C6C3C6" />
                            <Setter Property="Fill"
                                    TargetName="path"
                                    Value="{DynamicResource ForegroundDisabledBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="BorderBrush"
                Value="{DynamicResource PageInputBorderBrush}" />
        <Setter Property="BorderThickness"
                Value="0,1,1,1" />
        <Setter Property="Foreground"
                Value="{DynamicResource PageToolBarGlyphBrush}" />
    </Style>

    <!-- Flat cornered toolbar for the places where we use the toolbar between items
         Because control templates can't be re-used, this is a direct copy :( -->
    <!-- ToolBar -->
    <Style x:Key="PageToolbar_Flat"
           TargetType="{x:Type ToolBar}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToolBar}">
                    <Grid SnapsToDevicePixels="true"
                          x:Name="Grid">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Border Grid.Column="0"
                                x:Name="MainPanelBorder"
                                Background="{DynamicResource PageToolBarGradientBrush}"
                                BorderBrush="{DynamicResource PageInputBorderBrush}"
                                BorderThickness="1,1,0,1"
                                Padding="{TemplateBinding Padding}">
                            <DockPanel KeyboardNavigation.TabIndex="1"
                                       KeyboardNavigation.TabNavigation="Local">
                                <Thumb IsEnabled="False"
                                       Visibility="Hidden"
                                       Margin="-3,-1,0,0"
                                       x:Name="ToolBarThumb"
                                       Style="{DynamicResource PageToolBarThumbStyle}"
                                       Width="10"
                                       Background="{x:Null}"
                                       Padding="6,5,1,6" />
                                <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                  HorizontalAlignment="Center"
                                                  Margin="4,0,4,0"
                                                  x:Name="ToolBarHeader"
                                                  VerticalAlignment="Center"
                                                  ContentSource="Header" />
                                <ToolBarPanel SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                              Margin="0,1,2,2"
                                              x:Name="PART_ToolBarPanel"
                                              IsItemsHost="true" />
                            </DockPanel>
                        </Border>
                        <Grid HorizontalAlignment="Right"
                              Grid.Column="1"
                              x:Name="OverflowGrid">
                            <ToggleButton IsEnabled="{TemplateBinding HasOverflowItems}"
                                          IsTabStop="False"
                                          FocusVisualStyle="{x:Null}"
                                          x:Name="OverflowButton"
                                          Style="{DynamicResource PageToolBarHorizontalOverflowButtonStyle_Flat}"
                                          Background="{DynamicResource PageToolBarGradientBrush}"
                                          IsChecked="{Binding Path=IsOverflowOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                          ClickMode="Press"
                                          BorderBrush="{DynamicResource ColorInvisibleBrush}"
                                          Foreground="{DynamicResource ColorInvisibleBrush}" />
                            <Popup Focusable="false"
                                   AllowsTransparency="true"
                                   IsOpen="{Binding Path=IsOverflowOpen, RelativeSource={RelativeSource TemplatedParent}}"
                                   Placement="Bottom"
                                   PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
                                   StaysOpen="false"
                                   x:Name="OverflowPopup">
                                <Border Background="{DynamicResource PageBackgroundBrush_90Transparent}"
                                        BorderBrush="{DynamicResource PageInputBorderBrush}"
                                        BorderThickness="1"
                                        CornerRadius="1.5">
                                    <ToolBarOverflowPanel Focusable="true"
                                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                          FocusVisualStyle="{x:Null}"
                                                          Margin="2"
                                                          x:Name="PART_ToolBarOverflowPanel"
                                                          KeyboardNavigation.DirectionalNavigation="Cycle"
                                                          KeyboardNavigation.TabNavigation="Cycle"
                                                          WrapWidth="200" />
                                </Border>
                            </Popup>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsOverflowOpen"
                                 Value="true">
                            <Setter Property="IsEnabled"
                                    TargetName="ToolBarThumb"
                                    Value="false" />
                        </Trigger>
                        <Trigger Property="Header"
                                 Value="{x:Null}">
                            <Setter Property="Visibility"
                                    TargetName="ToolBarHeader"
                                    Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="ToolBarTray.IsLocked"
                                 Value="true">
                            <Setter Property="Visibility"
                                    TargetName="ToolBarThumb"
                                    Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Foreground"
                                    Value="{DynamicResource ForegroundDisabledBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Toolbar Horizontal Overflow Button -->
    <Style x:Key="PageToolBarHorizontalOverflowButtonStyle_Flat"
           TargetType="{x:Type ToggleButton}">
        <Setter Property="MinHeight"
                Value="0" />
        <Setter Property="MinWidth"
                Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border SnapsToDevicePixels="true"
                            x:Name="Bd"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{DynamicResource PageInputBorderBrush}"
                            BorderThickness="0,1,1,1"
                            Padding="7,2,2,2">
                        <Path Fill="{DynamicResource PageToolBarGlyphBrush}"
                              Data="M -0.5 3 L 5.5 3 L 2.5 6 Z"
                              RenderTransformOrigin="0.5,0.5"
                              x:Name="path"
                              VerticalAlignment="Bottom"
                              HorizontalAlignment="Right">
                            <Path.RenderTransform>
                                <ScaleTransform ScaleX="1.25"
                                                ScaleY="1" />
                            </Path.RenderTransform>
                        </Path>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver"
                                 Value="true">
                            <Setter Property="Background"
                                    TargetName="Bd"
                                    Value="{DynamicResource PageToolBarButtonHoverBrush}" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused"
                                 Value="true">
                            <Setter Property="Background"
                                    TargetName="Bd"
                                    Value="{DynamicResource PageToolBarButtonHoverBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Foreground"
                                    Value="#C6C3C6" />
                            <Setter Property="Fill"
                                    TargetName="path"
                                    Value="{DynamicResource ForegroundDisabledBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="BorderBrush"
                Value="{DynamicResource PageInputBorderBrush}" />
        <Setter Property="BorderThickness"
                Value="0,1,1,1" />
        <Setter Property="Foreground"
                Value="{DynamicResource PageToolBarGlyphBrush}" />
    </Style>

    <!-- Toolbar Thumb (Drag Handle) -->
    <!-- ***NOT USED*** -->
    <Style x:Key="PageToolBarThumbStyle"
           TargetType="{x:Type Thumb}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border SnapsToDevicePixels="True"
                            Background="Transparent"
                            Padding="{TemplateBinding Padding}">
                        <Rectangle>
                            <Rectangle.Fill>
                                <DrawingBrush TileMode="Tile"
                                              Viewbox="0,0,4,4"
                                              ViewboxUnits="Absolute"
                                              Viewport="0,0,4,4"
                                              ViewportUnits="Absolute">
                                    <DrawingBrush.Drawing>
                                        <DrawingGroup>
                                            <GeometryDrawing Brush="White"
                                                             Geometry="M 1 1 L 1 3 L 3 3 L 3 1 z" />
                                            <GeometryDrawing Brush="#C6C3C6"
                                                             Geometry="M 0 0 L 0 2 L 2 2 L 2 0 z" />
                                        </DrawingGroup>
                                    </DrawingBrush.Drawing>
                                </DrawingBrush>
                            </Rectangle.Fill>
                        </Rectangle>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver"
                                 Value="true">
                            <Setter Property="Cursor"
                                    Value="SizeAll" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Background"
                Value="{DynamicResource PageInputBorderBrush}" />
    </Style>

    <!-- 
        ########################################################################
        Control:     MessageControl
        Type:        Style 
        Description: For modal error, warning, and information messages
        ########################################################################
    -->
    <Style x:Key="MessageIcon"
           TargetType="{x:Type Image}"
           BasedOn="{x:Null}">
        <Setter Property="Height"
                Value="32" />
        <Setter Property="Width"
                Value="32" />
        <Setter Property="Margin"
                Value="5,10,5,0" />
        <Setter Property="Stretch"
                Value="None" />
        <Setter Property="VerticalAlignment"
                Value="Top" />

    </Style>

    <Style x:Key="MessageDialogProblemText"
           TargetType="{x:Type TextBox}"
           BasedOn="{x:Null}">

        <Setter Property="BorderThickness"
                Value="0" />
        <Setter Property="Focusable"
                Value="True" />
        <Setter Property="FontSize"
                Value="16" />
        <Setter Property="Foreground"
                Value="{DynamicResource PageActivityModalMessageProblemTextBrush}" />
        <Setter Property="HorizontalAlignment"
                Value="Left" />
        <Setter Property="Margin"
                Value="5,10,5,5" />
        <Setter Property="TextWrapping"
                Value="Wrap" />
        <Setter Property="VerticalAlignment"
                Value="Stretch" />
        <Setter Property="Width"
                Value="Auto" />
    </Style>

    <Style x:Key="MessageDialogCommonText"
           TargetType="{x:Type TextBox}"
           BasedOn="{x:Null}">
        <Setter Property="BorderThickness"
                Value="0" />
        <Setter Property="Focusable"
                Value="True" />
        <Setter Property="FontSize"
                Value="12" />
        <Setter Property="Foreground"
                Value="{DynamicResource PageInputForegroundBrush}" />
        <Setter Property="Margin"
                Value="5,5,5,10" />
        <Setter Property="TextWrapping"
                Value="Wrap" />
        <Setter Property="Width"
                Value="Auto" />
    </Style>

    <!-- 
        ########################################################################
        Control:     User Control Host
        Type:        Style 
        Description: Enables custom buttons and a User control
    BasedOn="{StaticResource {x:Type Button}}"
        ########################################################################
    -->

    <Style x:Key="UserControlHost_Button"
           TargetType="{x:Type Button}"
           BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="Height"
                Value="Auto" />
        <Setter Property="HorizontalAlignment"
                Value="Center" />
        <Setter Property="Margin"
                Value="0,0,5,0" />
        <Setter Property="Padding"
                Value="5" />
        <Setter Property="Width"
                Value="Auto" />
        <Setter Property="MinWidth"
                Value="75" />
        <Setter Property="VerticalAlignment"
                Value="Center" />
    </Style>

    <Style x:Key="UserControlHost_Border"
           TargetType="{x:Type Border}"
           BasedOn="{x:Null}">
        <Setter Property="Background"
                Value="{DynamicResource PageActivityModalMessageButtonBackgroundBrush}" />
    </Style>

    <!-- TreeViewItem Copied from Vista theme -->
    <PathGeometry x:Key="PageTreeViewItemTreeArrow">
        <PathGeometry.Figures>
            <PathFigureCollection>
                <PathFigure IsFilled="True"
                            StartPoint="0 0"
                            IsClosed="True">
                    <PathFigure.Segments>
                        <PathSegmentCollection>
                            <LineSegment Point="0 6" />
                            <LineSegment Point="6 0" />
                        </PathSegmentCollection>
                    </PathFigure.Segments>
                </PathFigure>
            </PathFigureCollection>
        </PathGeometry.Figures>
    </PathGeometry>

    <Style x:Key="PageTreeViewItemExpandCollapseToggleStyle"
           TargetType="{x:Type ToggleButton}">
        <Setter Property="Focusable"
                Value="False" />
        <Setter Property="Width"
                Value="16" />
        <Setter Property="Height"
                Value="16" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Width="16"
                            Height="16"
                            Background="Transparent"
                            Padding="5,5,5,5">
                        <Path x:Name="ExpandPath"
                              Fill="{DynamicResource PageTreeViewItemArrowFill}"
                              Stroke="{DynamicResource PageTreeViewItemArrowStroke}"
                              Data="{StaticResource PageTreeViewItemTreeArrow}">
                            <Path.RenderTransform>
                                <RotateTransform Angle="135"
                                                 CenterX="3"
                                                 CenterY="3" />
                            </Path.RenderTransform>
                        </Path>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver"
                                 Value="True">
                            <Setter TargetName="ExpandPath"
                                    Property="Stroke"
                                    Value="{DynamicResource PageTreeViewItemArrowHoverStroke}" />
                            <Setter TargetName="ExpandPath"
                                    Property="Fill"
                                    Value="{DynamicResource PageTreeViewItemArrowHoverFill}" />
                        </Trigger>

                        <Trigger Property="IsChecked"
                                 Value="True">
                            <Setter TargetName="ExpandPath"
                                    Property="RenderTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="180"
                                                     CenterX="3"
                                                     CenterY="3" />
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="ExpandPath"
                                    Property="Fill"
                                    Value="{DynamicResource PageTreeViewItemArrowCollapsedFill}" />
                            <Setter TargetName="ExpandPath"
                                    Property="Stroke"
                                    Value="{DynamicResource PageTreeViewItemArrowCollapsedStroke}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="PageTreeViewItemFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Type TreeViewItem}"
           TargetType="{x:Type TreeViewItem}">
        <Setter Property="OverridesDefaultStyle"
                Value="True" />
        <Setter Property="HorizontalContentAlignment"
                Value="{Binding Path=HorizontalContentAlignment,RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="VerticalContentAlignment"
                Value="{Binding Path=VerticalContentAlignment,RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="Padding"
                Value="1,0,0,0" />
        <Setter Property="Foreground"
                Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="FocusVisualStyle"
                Value="{StaticResource PageTreeViewItemFocusVisual}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition MinWidth="19"
                                              Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition />
                        </Grid.RowDefinitions>
                        <ToggleButton x:Name="Expander"
                                      Style="{StaticResource PageTreeViewItemExpandCollapseToggleStyle}"
                                      IsChecked="{Binding Path=IsExpanded,RelativeSource={RelativeSource TemplatedParent}}"
                                      ClickMode="Press" />
                        <Border Name="Bd"
                                Grid.Column="1"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Padding="{TemplateBinding Padding}"
                                SnapsToDevicePixels="true">
                            <ContentPresenter x:Name="PART_Header"
                                              ContentSource="Header"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Border>
                        <ItemsPresenter x:Name="ItemsHost"
                                        Grid.Row="1"
                                        Grid.Column="1"
                                        Grid.ColumnSpan="2" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded"
                                 Value="false">
                            <Setter TargetName="ItemsHost"
                                    Property="Visibility"
                                    Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="HasItems"
                                 Value="false">
                            <Setter TargetName="Expander"
                                    Property="Visibility"
                                    Value="Hidden" />
                        </Trigger>
                        <Trigger Property="IsSelected"
                                 Value="true">
                            <Setter TargetName="Bd"
                                    Property="Background"
                                    Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                            <Setter Property="Foreground"
                                    Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected"
                                           Value="true" />
                                <Condition Property="IsSelectionActive"
                                           Value="false" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Bd"
                                    Property="Background"
                                    Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
                            <Setter Property="Foreground"
                                    Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
                        </MultiTrigger>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Foreground"
                                    Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="PageTreeViewItemWithIcon"
           TargetType="{x:Type TreeViewItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition MinWidth="19"
                                              Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition />
                        </Grid.RowDefinitions>
                        <ToggleButton x:Name="Expander"
                                      Style="{StaticResource PageTreeViewItemExpandCollapseToggleStyle}"
                                      IsChecked="{Binding Path=IsExpanded,RelativeSource={RelativeSource TemplatedParent}}"
                                      ClickMode="Press" />
                        <Grid Grid.Column="1">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>
                            <Border Grid.Column="0"
                                    Width="22" />
                            <Border Name="Bd"
                                    Grid.Column="1"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    Padding="{TemplateBinding Padding}"
                                    SnapsToDevicePixels="true" />
                            <Border Grid.ColumnSpan="2"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    Padding="{TemplateBinding Padding}"
                                    SnapsToDevicePixels="true">
                                <ContentPresenter x:Name="PART_Header"
                                                  ContentSource="Header"
                                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </Border>
                        </Grid>
                        <ItemsPresenter x:Name="ItemsHost"
                                        Grid.Row="1"
                                        Grid.Column="1"
                                        Grid.ColumnSpan="2" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded"
                                 Value="false">
                            <Setter TargetName="ItemsHost"
                                    Property="Visibility"
                                    Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="HasItems"
                                 Value="false">
                            <Setter TargetName="Expander"
                                    Property="Visibility"
                                    Value="Hidden" />
                        </Trigger>
                        <Trigger Property="IsSelected"
                                 Value="true">
                            <Setter TargetName="Bd"
                                    Property="Background"
                                    Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                            <Setter Property="Foreground"
                                    Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected"
                                           Value="true" />
                                <Condition Property="IsSelectionActive"
                                           Value="false" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Bd"
                                    Property="Background"
                                    Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
                            <Setter Property="Foreground"
                                    Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
                        </MultiTrigger>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Foreground"
                                    Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="PageTreeViewItemImage"
           TargetType="{x:Type Image}">
        <Setter Property="Width"
                Value="16" />
        <Setter Property="Height"
                Value="16" />
        <Setter Property="Margin"
                Value="2" />
    </Style>

    <Style x:Key="PageFlatReadonlyTextBox"
           TargetType="{x:Type TextBox}"
           BasedOn="{x:Null}">
        <Setter Property="BorderThickness"
                Value="0" />
        <Setter Property="Foreground"
                Value="{DynamicResource PageInputForegroundBrush}" />
        <Setter Property="Margin"
                Value="3" />
        <Setter Property="IsReadOnly"
                Value="True" />
    </Style>

    <!-- 
    Why are we retemplating the GroupBox control with no differentation with Aero?
    Well, we are differentiating - We're setting IsHitTestVisible = false, on the
    border with the opacity mask. 
    However, the reason is that the default groupbox control template has a bug
    that causes the contentin the header to have a "deadzone" where the top line
    of the group box border crosses the header content. This means, for example
    that with hyperlinks in the header area, the hover effect would be lost
    as the mouse moved over the center line. This is because the border
    containing the line that goes around the content is higher in the z-order than
    the header. This means that it was getting the mouse events, and not the
    actual header. By making this border not hit test visible, we get the correct
    behaviour.
  -->
    <!-- Used by GroupBox to generate a visual brush/clip for -->
    <BorderGapMaskConverter x:Key="PageControlsGroupBoxBorderConverter" />

    <!-- This style is lifted directly from Aero WPF theme. -->
    <Style x:Key="{x:Type GroupBox}"
           TargetType="{x:Type GroupBox}">
        <Setter Property="BorderBrush"
                Value="{DynamicResource PageGroupBoxBorderBrush}" />
        <Setter Property="BorderThickness"
                Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GroupBox}">
                    <Grid SnapsToDevicePixels="true">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="6" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="6" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                            <RowDefinition Height="6" />
                        </Grid.RowDefinitions>
                        <!-- Border for the background with the same CornerRadius as the Border with the Header
                                 Using this because if the background is set in the Border with the Header the opacity
                                   mask will be applied to the background as well. -->
                        <Border CornerRadius="4"
                                Grid.Row="1"
                                Grid.RowSpan="3"
                                Grid.Column="0"
                                Grid.ColumnSpan="4"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                BorderBrush="Transparent"
                                Background="{TemplateBinding Background}" />
                        <!-- ContentPresenter for the header -->
                        <Border x:Name="Header"
                                Padding="3,1,3,0"
                                Grid.Row="0"
                                Grid.RowSpan="2"
                                Grid.Column="1">
                            <ContentPresenter ContentSource="Header"
                                              RecognizesAccessKey="True"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Border>
                        <!-- Primary content for GroupBox -->
                        <ContentPresenter Grid.Row="2"
                                          Grid.Column="1"
                                          Grid.ColumnSpan="2"
                                          Margin="{TemplateBinding Padding}"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        <!-- IsHitTestVisible=False is set here to ensure that it doesn't
                 interfere wtih the Header content. -->
                        <Border CornerRadius="4"
                                Grid.Row="1"
                                Grid.RowSpan="3"
                                Grid.ColumnSpan="4"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                BorderBrush="White"
                                IsHitTestVisible="False">
                            <Border.OpacityMask>
                                <MultiBinding Converter="{StaticResource PageControlsGroupBoxBorderConverter}"
                                              ConverterParameter="7">
                                    <Binding ElementName="Header"
                                             Path="ActualWidth" />
                                    <Binding RelativeSource="{RelativeSource Self}"
                                             Path="ActualWidth" />
                                    <Binding RelativeSource="{RelativeSource Self}"
                                             Path="ActualHeight" />
                                </MultiBinding>
                            </Border.OpacityMask>

                            <Border BorderThickness="{TemplateBinding BorderThickness}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    CornerRadius="3">
                                <Border BorderThickness="{TemplateBinding BorderThickness}"
                                        BorderBrush="White"
                                        CornerRadius="2" />
                            </Border>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- TabItem -->
    <Style x:Key="{x:Type TabItem}"
           TargetType="{x:Type TabItem}">

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Grid>
                        <Border Name="Border"
                                Margin="0,0,-4,0"
                                Background="{DynamicResource PageTabItem_BackgroundBrush}"
                                BorderBrush="{DynamicResource PageTabControl_SolidBorderBrush}"
                                BorderThickness="1,1,1,1"
                                CornerRadius="2,12,0,0">
                            <ContentPresenter x:Name="ContentSite"
                                              VerticalAlignment="Center"
                                              HorizontalAlignment="Center"
                                              ContentSource="Header"
                                              Margin="12,2,12,2"
                                              RecognizesAccessKey="True" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected"
                                 Value="True">
                            <Setter Property="Panel.ZIndex"
                                    Value="100" />
                            <Setter TargetName="Border"
                                    Property="Background"
                                    Value="{DynamicResource PageTabControl_SelectedBackgroundBrush}" />
                            <Setter TargetName="Border"
                                    Property="BorderThickness"
                                    Value="1,1,1,0" />
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="False">
                            <Setter TargetName="Border"
                                    Property="Background"
                                    Value="{DynamicResource PageTabControl_DisabledBackgroundBrush}" />
                            <Setter TargetName="Border"
                                    Property="BorderBrush"
                                    Value="{DynamicResource PageTabControl_DisabledBorderBrush}" />
                            <Setter Property="Foreground"
                                    Value="{DynamicResource PageTabControl_DisabledForegroundBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- DropDownPopupButton -->

    <!-- 
        Why is this style here?
        In order to provide a popup window when the dropdown popup button is clicked we need to re-template
        the control and since control templates do not support inheritence, we lose the styling of the
        built-in toolbar button when we do so.  All toolbar buttons will eventually be re-styled to a "Camano"
        style but in the mean time this style has been put in place so that these drop down toolbar buttons
        visually resemble other toolbar buttons.
  -->

    <Style x:Key="PageDropDownPopupButtonStyle"
           TargetType="{x:Type WpfControls:DropDownPopupButton}">
        <Setter Property="Foreground"
                Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="Padding"
                Value="2" />
        <Setter Property="BorderThickness"
                Value="1" />
        <Setter Property="Background"
                Value="Transparent" />
        <Setter Property="BorderBrush"
                Value="Transparent" />
        <Setter Property="HorizontalAlignment"
                Value="Center" />
        <Setter Property="VerticalAlignment"
                Value="Center" />
        <Setter Property="HorizontalContentAlignment"
                Value="Center" />
        <Setter Property="VerticalContentAlignment"
                Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type WpfControls:DropDownPopupButton}">
                    <Border x:Name="Bd"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Padding="{TemplateBinding Padding}"
                            SnapsToDevicePixels="true">

                        <StackPanel Orientation="Horizontal">

                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />

                            <Path HorizontalAlignment="Left"
                                  VerticalAlignment="Center"
                                  Fill="{DynamicResource PageInputForegroundBrush}"
                                  Data="M 0 0 L 4 4 L 8 0 Z"
                                  Stretch="None"
                                  Margin="4,0,4,0" />

                            <Popup x:Name="PART_Popup"
                                   Child="{TemplateBinding PopupContent}"
                                   PopupAnimation="Slide"
                                   Focusable="True"
                                   AllowsTransparency="True"
                                   Placement="Bottom"
                                   PlacementTarget="{Binding ElementName=Bd}"
                                   StaysOpen="False" />
                        </StackPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked"
                                 Value="true">
                            <Setter Property="BorderBrush"
                                    Value="{DynamicResource PageDropDownPopupButtonHoverBorderBrush}" />
                            <Setter Property="Background"
                                    Value="{DynamicResource PageDropDownPopupButtonCheckedBackgroundBrush}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver"
                                 Value="true">
                            <Setter Property="BorderBrush"
                                    Value="{DynamicResource PageDropDownPopupButtonHoverBorderBrush}" />
                            <Setter Property="Background"
                                    Value="{DynamicResource PageDropDownPopupButtonHoverBackgroundBrush}" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused"
                                 Value="true">
                            <Setter Property="BorderBrush"
                                    Value="{DynamicResource PageDropDownPopupButtonHoverBorderBrush}" />
                            <Setter Property="Background"
                                    Value="{DynamicResource PageDropDownPopupButtonHoverBackgroundBrush}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver"
                                           Value="true" />
                                <Condition Property="IsChecked"
                                           Value="true" />
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush"
                                    Value="{DynamicResource PageDropDownPopupButtonPressedBorderBrush}" />
                            <Setter Property="Background"
                                    Value="{DynamicResource PageDropDownPopupButtonPressedBackgroundBrush}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsKeyboardFocused"
                                           Value="true" />
                                <Condition Property="IsChecked"
                                           Value="true" />
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush"
                                    Value="{DynamicResource PageDropDownPopupButtonPressedBorderBrush}" />
                            <Setter Property="Background"
                                    Value="{DynamicResource PageDropDownPopupButtonPressedBackgroundBrush}" />
                        </MultiTrigger>
                        <Trigger Property="IsPressed"
                                 Value="true">
                            <Setter Property="BorderBrush"
                                    Value="{DynamicResource PageDropDownPopupButtonPressedBorderBrush}" />
                            <Setter Property="Background"
                                    Value="{DynamicResource PageDropDownPopupButtonPressedBackgroundBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Foreground"
                                    Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="PageResultStep"
           TargetType="{x:Type WpfControls:ResultStepControl}">

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type WpfControls:ResultStepControl}">
                    <Grid>
                        <!-- For the results control, we have three columns.
                             The first contains the ui that represents the info
                             about the step - comment, expected result, attachments
                             etc. Then we have a result column, which holds the
                             result dropdown. Finally, there is the third - right most
                             column - which shows the afn status
                            -->
                        <Grid.ColumnDefinitions>
                            <!-- Main Control area and result picker -->
                            <ColumnDefinition Width="*" />

                            <!-- AFN Column -->
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>

                            <Border BorderThickness="0,0,0,1"
                                BorderBrush="Gray"
                                Name="horizontalBorder">
                            <Border BorderBrush="Gray"
                                    BorderThickness="1,0,1,0"
                                    Name="verticalBorder">
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition Width="*" />
                                        <ColumnDefinition Width="Auto" />
                                    </Grid.ColumnDefinitions>
                                    <Border x:Name="spacingBorder"
                                            Grid.Column="0"
                                            Width="{TemplateBinding NestedSpacing}"
                                            Visibility="Collapsed" />

                                    <ToggleButton x:Name="PART_ChildStepToggle"
                                                  Style="{DynamicResource PageTreeViewItemExpandCollapseToggleStyle}"
                                                  VerticalAlignment="Center"
                                                  HorizontalAlignment="Center"
                                                  Visibility="Collapsed"/>

                                    <StackPanel Grid.Column="1"
                                                Margin="3">
                                        <!-- Step Title Grid-->
                                        <Grid>
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="Auto"
                                                                  SharedSizeGroup="IconColumn" />
                                                <ColumnDefinition Width="*" />
                                                <ColumnDefinition Width="Auto" />
                                            </Grid.ColumnDefinitions>

                                            <TextBlock x:Name="PART_Title"
                                                       TextWrapping="Wrap"
                                                       Text="{TemplateBinding Title}"
                                                       Grid.ColumnSpan="2" />

                                            <WpfControls:SplitButton x:Name="PART_PlayDropDown"
                                                                     Grid.Column="2"
                                                                     VerticalAlignment="Top"
                                                                     HorizontalAlignment="Center"
                                                                     Visibility="Collapsed"
                                                                     Style="{DynamicResource PageSplitButtonToolbar}"
                                                                     MenuItemsSource="{TemplateBinding PlayMenuItems}"
                                                                     Content="{TemplateBinding PlayContent}"/>
                                        </Grid>

                                        <!--
                                    **** This panel contains step details. It is collapsed by default and
                                    **** is only visible when the step is selected.  The panel contains
                                    **** details; step parameters, expected result panel, step comment,
                                    **** and step attachments.
                                    -->
                                        <StackPanel x:Name="ExtendedData"
                                                    Visibility="Collapsed">

                                            <!--
                                            **** The expected result panel.
                                            -->
                                            <Grid x:Name="ExpectedResult">
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="Auto"
                                                                      SharedSizeGroup="IconColumn" />
                                                    <ColumnDefinition Width="*" />
                                                </Grid.ColumnDefinitions>

                                                <Border BorderThickness="1"
                                                        Grid.ColumnSpan="2"
                                                        Margin="0,3,0,3"
                                                        Background="{DynamicResource InfoBackgroundBrush}">

                                                    <StackPanel Margin="4">
                                                        <TextBlock x:Uid="BoldExpectedLabel"
                                                                   Text="Expected"
                                                                   FontWeight="Bold" />

                                                        <TextBlock Foreground="{DynamicResource InfoTextBrush}"
                                                                   TextWrapping="Wrap"
                                                                   Text="{TemplateBinding ExpectedResult}" />

                                                        <!--
                                                    **** The expected parameters list
                                                    -->
                                                        <ItemsControl x:Name="ExpectedParametersList"
                                                                      ItemsSource="{Binding ExpectedParameters}"
                                                                      HorizontalAlignment="Stretch"
                                                                      Margin="0,9,0,0">

                                                            <ItemsControl.ItemTemplate>
                                                                <DataTemplate>
                                                                    <StackPanel Orientation="Horizontal">
                                                                        <TextBlock Text="{Binding Name}" />
                                                                        <TextBlock Text=" = " />
                                                                        <TextBlock Text="{Binding Value}" />
                                                                    </StackPanel>
                                                                </DataTemplate>
                                                            </ItemsControl.ItemTemplate>
                                                        </ItemsControl>
                                                    </StackPanel>
                                                </Border>
                                            </Grid>

                                            <!--
                                            **** The step parameters list.
                                            -->
                                            <WpfControls:StepParametersControl
                                                x:Name="PART_StepParameters"
                                                Parameters="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=StepParameters}"/>

                                            <!--
                                            **** The step attachments list.
                                            -->
                                            <WpfControls:StepAttachmentsControl
                                                x:Name="PART_StepAttachments"
                                                Attachments="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=StepAttachments}"/>

                                            <!--
                                            **** The step attachments list.
                                            -->
                                            <WpfControls:StepAttachmentsControl
                                                x:Name="PART_StepResultAttachments"
                                                CanDelete="True"
                                                Attachments="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=StepResultAttachments}"/>


                                            <!--
                                            **** The comment section.
                                            -->
                                            <Grid x:Name="CommentData"
                                                  Margin="0,6,0,6"
                                                  Visibility="Collapsed">

                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="Auto"
                                                                      SharedSizeGroup="IconColumn" />
                                                    <ColumnDefinition Width="*" />
                                                </Grid.ColumnDefinitions>

                                                <Image Width="16"
                                                       Height="16"
                                                       Source="{DynamicResource Pencil_16}"
                                                       VerticalAlignment="Top"
                                                       Margin="0,0,6,0" />

                                                <TextBox x:Name="PART_Comment"
                                                         MinLines="2"
                                                         MaxLines="5"
                                                         TextWrapping="Wrap"
                                                         AcceptsReturn="True"
                                                         VerticalScrollBarVisibility="Auto"
                                                         Text="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Comment, UpdateSourceTrigger=PropertyChanged}"
                                                         Grid.Column="1" />
                                            </Grid>
                                        </StackPanel>
                                    </StackPanel>

                                    <!-- Result Button -->
                                    <WpfControls:SplitButton x:Name="PART_ResultDropDown"
                                                             Grid.Column="2"
                                                             VerticalAlignment="Top"
                                                             HorizontalAlignment="Center"
                                                             Style="{DynamicResource PageSplitButtonToolbar}"
                                                             MenuItemsSource="{TemplateBinding OutcomeMenuItems}">
                                        <Image Width="16"
                                               Height="16"
                                               x:Name="ResultIcon"
                                               Source="{DynamicResource InconclusiveWhite_16}" />
                                    </WpfControls:SplitButton>
                                </Grid>
                            </Border>
                        </Border>

                        <Border Grid.Column="1"
                                Width="15"
                                Background="White">
                                <DockPanel LastChildFill="True">

                                    <Border x:Name="AfnCellTop"
                                            Height="2"
                                            Visibility="Collapsed"
                                            Background="{DynamicResource AfnChannelNotPlayableBrush}"
                                            Margin="0,0,3,0"
                                            DockPanel.Dock="Top"/>

                                    <Border x:Name="AfnCellBottom"
                                            Visibility="Collapsed"
                                            Background="{DynamicResource AfnChannelNotPlayableBrush}"
                                            Margin="0,0,3,1"
                                            DockPanel.Dock="Bottom"
                                            Height="2"/>

                                    <Border x:Name="AfnCellMiddle"
                                            Visibility="Visible"
                                            Background="{DynamicResource AfnChannelNotPlayableBrush}"
                                            Margin="4,0,3,0"/>
                                </DockPanel>
                        </Border>

                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ExpectedResult" 
                                 Value="{x:Null}">
                            <Setter TargetName="ExpectedResult"
                                    Property="Visibility"
                                    Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="ExpectedResult"
                                 Value="">
                            <Setter TargetName="ExpectedResult"
                                    Property="Visibility"
                                    Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="IsExpanded" 
                                 Value="True">
                            <Setter TargetName="ExtendedData"
                                    Property="Visibility"
                                    Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsSelectionStart"
                                 Value="True">
                            <Setter TargetName="horizontalBorder"
                                    Property="BorderThickness"
                                    Value="0,2,0,1"/>
                            <Setter TargetName="horizontalBorder"
                                    Property="BorderBrush"
                                    Value="Black" />
                        </Trigger>
                        <Trigger Property="IsSelectionEnd"
                                 Value="True">
                            <Setter TargetName="horizontalBorder"
                                    Property="BorderThickness"
                                    Value="0,0,0,2" />
                            <Setter TargetName="horizontalBorder"
                                    Property="BorderBrush"
                                    Value="Black" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelectionStart"
                                           Value="True" />
                                <Condition Property="IsSelectionEnd"
                                           Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="horizontalBorder"
                                    Property="BorderThickness"
                                    Value="0,2,0,2" />
                            <Setter TargetName="horizontalBorder"
                                    Property="BorderBrush"
                                    Value="Black" />
                        </MultiTrigger>
                        <Trigger Property="IsCommentVisible"
                                 Value="True">
                            <Setter TargetName="CommentData"
                                    Property="Visibility"
                                    Value="Visible" />                                    
                        </Trigger>

                        <Trigger Property="IsAfn" 
                                 Value="False">
                            <Setter TargetName="AfnCellTop"
                                    Property="Background"
                                    Value="Transparent" />
                            <Setter TargetName="AfnCellBottom"
                                    Property="Background"
                                    Value="Transparent" />
                            <Setter TargetName="AfnCellMiddle"
                                    Property="Background"
                                    Value="Transparent" />
                        </Trigger>

                        <Trigger Property="IsAfnStart" 
                                 Value="True">
                            <Setter TargetName="AfnCellTop"
                                    Property="Visibility"
                                    Value="Visible" />
                            <Setter TargetName="AfnCellBottom"
                                    Property="Visibility"
                                    Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="IsAfnEnd" 
                                 Value="True">
                            <Setter TargetName="AfnCellTop"
                                    Property="Visibility"
                                    Value="Collapsed" />
                            <Setter TargetName="AfnCellBottom"
                                    Property="Visibility"
                                    Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsAfnStartAndEnd" 
                                 Value="True">
                            <Setter TargetName="AfnCellTop"
                                    Property="Visibility"
                                    Value="Visible" />
                            <Setter TargetName="AfnCellBottom"
                                    Property="Visibility"
                                    Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsAfnPlayable" 
                                 Value="True">
                            <Setter TargetName="AfnCellTop"
                                    Property="Background"
                                    Value="{DynamicResource AfnChannelPlayableBrush}" />
                            <Setter TargetName="AfnCellBottom"
                                    Property="Background"
                                    Value="{DynamicResource AfnChannelPlayableBrush}" />
                            <Setter TargetName="AfnCellMiddle"
                                    Property="Background"
                                    Value="{DynamicResource AfnChannelPlayableBrush}" />
                        </Trigger>
                        <Trigger Property="Result"
                                 Value="{x:Static tcm:TestOutcome.Passed}">
                            <Setter TargetName="ResultIcon"
                                    Property="Source"
                                    Value="{DynamicResource OutcomePassed_16}" />
                        </Trigger>
                        <Trigger Property="Result"
                                 Value="{x:Static tcm:TestOutcome.Failed}">
                            <Setter TargetName="ResultIcon"
                                    Property="Source"
                                    Value="{DynamicResource OutcomeFailed_16}" />
                        </Trigger>
                        <Trigger Property="IsNested"
                                 Value="True">
                            <Setter TargetName="spacingBorder"
                                    Property="Visibility"
                                    Value="Visible" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ShowExpander" 
                                           Value="True" />
                                <Condition Property="IsAfn"
                                           Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_PlayDropDown"
                                    Property="Visibility"
                                    Value="Visible" />
                            <Setter TargetName="PART_ChildStepToggle"
                                    Property="Visibility"
                                    Value="Visible" />
                            <Setter TargetName="spacingBorder"
                                    Property="Visibility"
                                    Value="Visible" />
                        </MultiTrigger>
                        <Trigger Property="ShowExpander"
                                 Value="True">
                            <Setter TargetName="PART_ChildStepToggle"
                                    Property="Visibility"
                                    Value="Visible" />
                            <Setter TargetName="spacingBorder"
                                    Property="Visibility"
                                    Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Simple style that is used in SplitButton control template
         to give a flat, simple, button for the left hand side of the
         splitbutton. -->
    <Style x:Key="PageSplitButtonLeft"
           TargetType="{x:Type Button}">

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            SnapsToDevicePixels="true">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          Margin="{TemplateBinding Padding}"
                                          RecognizesAccessKey="True"
                                          x:Name="Content" />
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled"
                                 Value="False">
                            <Setter Property="Opacity"
                                    Value="0.5"
                                    TargetName="Content" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="PageSplitButtonToolbar"
           TargetType="{x:Type WpfControls:SplitButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type WpfControls:SplitButton}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <!-- * is here to enure that the text, if needed
                                 is clipped properly -->
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>

                        <!-- Button that is clicked to invoke an action; it is up
                             to the consumer to decide if this is MRU behaviour or otherwise.
                             Only has border on top, left, button so that when when it is
                             themed like a toolbar, it doesn't have a double line in the center
                             between the two buttons. -->
                        <Button x:Name="PART_ActionButton"
                                Grid.Column="0"
                                Style="{DynamicResource PageSplitButtonLeft}"
                                Content="{TemplateBinding Content}"
                                VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="1,1,0,1"
                                Padding="2,0,5,0"
                                Foreground="{TemplateBinding Foreground}"
                                VerticalAlignment="Stretch"
                                HorizontalAlignment="Stretch"
                                IsTabStop="False"
                                Focusable="False"
                                IsEnabled="{TemplateBinding IsButtonEnabled}" />

                        <!-- Dropdown, containing menu items that are shown when the user
                             drops the split button down. -->
                        <WpfControls:DropDownButton x:Name="PART_ActionList"
                                                    Grid.Column="1"
                                                    IsTabStop="False"
                                                    Focusable="False"
                                                    Foreground="{TemplateBinding Foreground}"
                                                    VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                                    HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                    Background="{TemplateBinding Background}"
                                                    BorderBrush="{TemplateBinding BorderBrush}"
                                                    PopupTarget="{Binding ElementName=PART_ActionButton}"
                                                    MenuItemsSource="{TemplateBinding MenuItemsSource}"
                                                    Style="{DynamicResource PageSplitDropDownButton}">
                            <Path HorizontalAlignment="Center"
                                  VerticalAlignment="Center"
                                  Data="M 0 0 L 4 4 L 8 0 Z"
                                  Fill="{TemplateBinding Foreground}"
                                  Stretch="None"
                                  Margin="4,0,4,0" />
                        </WpfControls:DropDownButton>

                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Setter Property="Background"
                Value="Transparent" />
        <Setter Property="VerticalAlignment"
                Value="Stretch" />
        <Setter Property="VerticalContentAlignment"
                Value="Center" />
        <Setter Property="HorizontalContentAlignment"
                Value="Center" />
        <Setter Property="BorderBrush"
                Value="Transparent" />
        <Style.Triggers>
            <Trigger Property="IsSplitOpen"
                     Value="true">
                <Setter Property="BorderBrush"
                        Value="{DynamicResource PageDropDownPopupButtonHoverBorderBrush}" />
                <Setter Property="Background"
                        Value="{DynamicResource PageDropDownPopupButtonCheckedBackgroundBrush}" />
            </Trigger>
            <Trigger Property="IsMouseOver"
                     Value="true">
                <Setter Property="BorderBrush"
                        Value="{DynamicResource PageDropDownPopupButtonHoverBorderBrush}" />
                <Setter Property="Background"
                        Value="{DynamicResource PageDropDownPopupButtonHoverBackgroundBrush}" />
            </Trigger>
            <Trigger Property="IsKeyboardFocused"
                     Value="true">
                <Setter Property="BorderBrush"
                        Value="{DynamicResource PageDropDownPopupButtonHoverBorderBrush}" />
                <Setter Property="Background"
                        Value="{DynamicResource PageDropDownPopupButtonHoverBackgroundBrush}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver"
                               Value="true" />
                    <Condition Property="IsSplitOpen"
                               Value="true" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush"
                        Value="{DynamicResource PageDropDownPopupButtonPressedBorderBrush}" />
                <Setter Property="Background"
                        Value="{DynamicResource PageDropDownPopupButtonPressedBackgroundBrush}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsKeyboardFocused"
                               Value="true" />
                    <Condition Property="IsSplitOpen"
                               Value="true" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush"
                        Value="{DynamicResource PageDropDownPopupButtonPressedBorderBrush}" />
                <Setter Property="Background"
                        Value="{DynamicResource PageDropDownPopupButtonPressedBackgroundBrush}" />
            </MultiTrigger>
            <Trigger Property="IsPressed"
                     Value="true">
                <Setter Property="BorderBrush"
                        Value="{DynamicResource PageDropDownPopupButtonPressedBorderBrush}" />
                <Setter Property="Background"
                        Value="{DynamicResource PageDropDownPopupButtonPressedBackgroundBrush}" />
            </Trigger>
            <Trigger Property="IsEnabled"
                     Value="false">
                <Setter Property="Foreground"
                        Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Style for providing a simple flat layout for a dropdown button
        that can be used in the SplitButton control template. Specifically
        this is simple, and thin so it can have the toolbar colors applied to it -->
    <Style x:Key="PageSplitDropDownButton"
           TargetType="{x:Type WpfControls:DropDownButton}">
        <Setter Property="OverridesDefaultStyle"
                Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type WpfControls:DropDownButton}">
                    <Border BorderThickness="1"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="PageFlatListBox"
           TargetType="{x:Type ListBox}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBox}">
                    <Border Background="{TemplateBinding Background}">
                        <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>

    <Style x:Key="PageEmptyListBoxItem"
           TargetType="{x:Type ListBoxItem}">
        <Setter Property="OverridesDefaultStyle"
                Value="True" />
        <Setter Property="Background"
                Value="Transparent" />
        <Setter Property="HorizontalContentAlignment"
                Value="{Binding Path=HorizontalContentAlignment,RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="VerticalContentAlignment"
                Value="{Binding Path=VerticalContentAlignment,RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="Padding"
                Value="0" />
        <Setter Property="KeyboardNavigation.DirectionalNavigation"
                Value="Local" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Border Name="Bd"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Padding="{TemplateBinding Padding}"
                            SnapsToDevicePixels="true">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected"
                                 Value="true">
                            <Setter TargetName="Bd"
                                    Property="Background"
                                    Value="{DynamicResource PageStepSelectionBrush}" />
                            <Setter Property="Foreground"
                                    Value="{DynamicResource PageStepTextHighlightBrush}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected"
                                           Value="true" />
                                <Condition Property="Selector.IsSelectionActive"
                                           Value="false" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Bd"
                                    Property="Background"
                                    Value="{DynamicResource PageInactiveSelectionBrush}" />
                            <Setter Property="Foreground"
                                    Value="{DynamicResource PageInactiveStepTextHighlightBrush}" />
                        </MultiTrigger>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Foreground"
                                    Value="{DynamicResource PageButtonForegroundDisabledBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
</ResourceDictionary>
